/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
/* Document
       ========================================================================== */
/**
     * 1. Change the default font family in all browsers (opinionated).
     * 2. Correct the line height in all browsers.
     * 3. Prevent adjustments of font size after orientation changes in
     *    IE on Windows Phone and in iOS.
     */
html {
  font-family: sans-serif;
  /* 1 */
  line-height: 1.15;
  /* 2 */
  -ms-text-size-adjust: 100%;
  /* 3 */
  -webkit-text-size-adjust: 100%;
  /* 3 */
}

/* Sections
       ========================================================================== */
/**
     * Remove the margin in all browsers (opinionated).
     */
body {
  margin: 0;
}

/**
     * Add the correct display in IE 9-.
     */
article,
aside,
footer,
header,
nav,
section {
  display: block;
}

/**
     * Correct the font size and margin on `h1` elements within `section` and
     * `article` contexts in Chrome, Firefox, and Safari.
     */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/* Grouping content
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
figcaption,
figure {
  display: block;
}

/**
     * Add the correct margin in IE 8.
     */
figure {
  margin: 1em 40px;
}

/**
     * 1. Add the correct box sizing in Firefox.
     * 2. Show the overflow in Edge and IE.
     */
hr {
  box-sizing: content-box;
  /* 1 */
  height: 0;
  /* 1 */
  overflow: visible;
  /* 2 */
}

/**
     * Add the correct display in IE.
     */
main {
  display: block;
}

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
pre {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/* Links
       ========================================================================== */
/**
     * 1. Remove the gray background on active links in IE 10.
     * 2. Remove gaps in links underline in iOS 8+ and Safari 8+.
     */
a {
  background-color: transparent;
  /* 1 */
  -webkit-text-decoration-skip: objects;
  /* 2 */
}

/**
     * Remove the outline on focused links when they are also active or hovered
     * in all browsers (opinionated).
     */
a:active,
a:hover {
  outline-width: 0;
}

/* Text-level semantics
       ========================================================================== */
/**
     * 1. Remove the bottom border in Firefox 39-.
     * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.
     */
abbr[title] {
  border-bottom: none;
  /* 1 */
  text-decoration: underline;
  /* 2 */
  text-decoration: underline dotted;
  /* 2 */
}

/**
     * Prevent the duplicate application of `bolder` by the next rule in Safari 6.
     */
b,
strong {
  font-weight: inherit;
}

/**
     * Add the correct font weight in Chrome, Edge, and Safari.
     */
b,
strong {
  font-weight: bolder;
}

/**
     * 1. Correct the inheritance and scaling of font size in all browsers.
     * 2. Correct the odd `em` font sizing in all browsers.
     */
code,
kbd,
samp {
  font-family: monospace, monospace;
  /* 1 */
  font-size: 1em;
  /* 2 */
}

/**
     * Add the correct font style in Android 4.3-.
     */
dfn {
  font-style: italic;
}

/**
     * Add the correct background and color in IE 9-.
     */
mark {
  background-color: #ff0;
  color: #000;
}

/**
     * Add the correct font size in all browsers.
     */
small {
  font-size: 80%;
}

/**
     * Prevent `sub` and `sup` elements from affecting the line height in
     * all browsers.
     */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

/* Embedded content
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
audio,
video {
  display: inline-block;
}

/**
     * Add the correct display in iOS 4-7.
     */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
     * Remove the border on images inside links in IE 10-.
     */
img {
  border-style: none;
}

/**
     * Hide the overflow in IE.
     */
svg:not(:root) {
  overflow: hidden;
}

/* Forms
       ========================================================================== */
/**
     * 1. Change the font styles in all browsers (opinionated).
     * 2. Remove the margin in Firefox and Safari.
     */
button,
input,
optgroup,
select,
textarea {
  font-family: sans-serif;
  /* 1 */
  font-size: 100%;
  /* 1 */
  line-height: 1.15;
  /* 1 */
  margin: 0;
  /* 2 */
}

/**
     * Show the overflow in IE.
     */
button {
  overflow: visible;
}

/**
     * Remove the inheritance of text transform in Edge, Firefox, and IE.
     * 1. Remove the inheritance of text transform in Firefox.
     */
button,
select {
  /* 1 */
  text-transform: none;
}

/**
     * 1. Prevent a WebKit bug where (2) destroys native `audio` and `video`
     *    controls in Android 4.
     * 2. Correct the inability to style clickable types in iOS and Safari.
     */
button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
}

button,
[type="button"],
[type="reset"],
[type="submit"] {
  /**
       * Remove the inner border and padding in Firefox.
       */
  /**
       * Restore the focus styles unset by the previous rule.
       */
}

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

/**
     * Show the overflow in Edge.
     */
input {
  overflow: visible;
}

/**
     * 1. Add the correct box sizing in IE 10-.
     * 2. Remove the padding in IE 10-.
     */
[type="checkbox"],
[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
     * Correct the cursor style of increment and decrement buttons in Chrome.
     */
[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
     * 1. Correct the odd appearance in Chrome and Safari.
     * 2. Correct the outline style in Safari.
     */
[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  outline-offset: -2px;
  /* 2 */
  /**
       * Remove the inner padding and cancel buttons in Chrome and Safari on macOS.
       */
}

[type="search"]::-webkit-search-cancel-button, [type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
     * 1. Correct the inability to style clickable types in iOS and Safari.
     * 2. Change font properties to `inherit` in Safari.
     */
::-webkit-file-upload-button {
  -webkit-appearance: button;
  /* 1 */
  font: inherit;
  /* 2 */
}

/**
     * Change the border, margin, and padding in all browsers (opinionated).
     */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
     * 1. Correct the text wrapping in Edge and IE.
     * 2. Correct the color inheritance from `fieldset` elements in IE.
     * 3. Remove the padding so developers are not caught out when they zero out
     *    `fieldset` elements in all browsers.
     */
legend {
  box-sizing: border-box;
  /* 1 */
  display: table;
  /* 1 */
  max-width: 100%;
  /* 1 */
  padding: 0;
  /* 3 */
  color: inherit;
  /* 2 */
  white-space: normal;
  /* 1 */
}

/**
     * 1. Add the correct display in IE 9-.
     * 2. Add the correct vertical alignment in Chrome, Firefox, and Opera.
     */
progress {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
     * Remove the default vertical scrollbar in IE.
     */
textarea {
  overflow: auto;
}

/* Interactive
       ========================================================================== */
/*
     * Add the correct display in Edge, IE, and Firefox.
     */
details {
  display: block;
}

/*
     * Add the correct display in all browsers.
     */
summary {
  display: list-item;
}

/*
     * Add the correct display in IE 9-.
     */
menu {
  display: block;
}

/* Scripting
       ========================================================================== */
/**
     * Add the correct display in IE 9-.
     */
canvas {
  display: inline-block;
}

/**
     * Add the correct display in IE.
     */
template {
  display: none;
}

/* Hidden
       ========================================================================== */
/**
     * Add the correct display in IE 10-.
     */
[hidden] {
  display: none;
}

body {
  font-family: Arial, Helvetica, sans-serif;
  font-size: 16px;
  line-height: 22px;
}

h1,
h2,
h3,
h4,
h5,
h6,
.as-h1,
.as-h2,
.as-h3,
.as-h4,
.as-h5,
.as-h6 {
  font-family: "Courier New", Courier, monospace;
  text-transform: uppercase;
  font-weight: 200;
  margin: 30px 0;
}

h1,
.as-h1 {
  font-size: 48px;
  line-height: 60px;
}

h2,
.as-h2 {
  font-size: 20px;
  line-height: 28px;
}

h3,
.as-h3 {
  font-size: 16px;
  line-height: 22px;
}

h4,
.as-h4 {
  font-size: 16px;
  line-height: 22px;
}

h5,
.as-h5 {
  font-size: 16px;
  line-height: 22px;
}

h6,
.as-h6 {
  font-size: 16px;
  line-height: 22px;
}

p,
ul,
ol,
table,
blockquote,
figure,
hr,
pre,
code {
  margin: 20px 0;
}

a[href^='tel:'] {
  pointer-events: none;
}

ul ul,
ul ol,
ol ul,
ol ol {
  margin-top: 0;
  margin-bottom: 0;
}

hr {
  border-style: solid none none;
  border-color: #1a1a1a;
  border-width: 1px;
}

::-moz-selection {
  color: white;
  background: #ffb4ac;
}

::selection {
  color: white;
  background: #ffb4ac;
}

.button {
  outline: 0;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9ub3JtYWxpemUtc2Nzcy9zYXNzL25vcm1hbGl6ZS9fbm9ybWFsaXplLW1peGluLnNjc3MiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvbm9ybWFsaXplLXNjc3Mvc2Fzcy9ub3JtYWxpemUvX3ZhcmlhYmxlcy5zY3NzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS1zY3NzL3Nhc3Mvbm9ybWFsaXplL192ZXJ0aWNhbC1yaHl0aG0uc2NzcyIsIm1haW4uY3NzIiwiYmFzZS9fdHlwb2dyYXBoeS5zY3NzIiwidXRpbHMvX2Z1bmN0aW9ucy5zY3NzIiwidXRpbHMvX2NvbG9ycy5zY3NzIiwidXRpbHMvX21peGlucy5zY3NzIiwiY29tcG9uZW50cy9fYnV0dG9uLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNkNFLGlFQUFpRTtBQUcvRDtvRkFDZ0Y7QUFFaEY7Ozs7O09BS0c7QUFFSDtFQUNFLHdCQzFDdUI7RUQwQ1MsT0FBTztFQVFyQyxrQkFBa0I7RUFBRSxPQUFPO0VBRTdCLDJCQUEyQjtFQUFFLE9BQU87RUFDcEMsK0JBQStCO0VBQUUsT0FBTztDQUN6Qzs7QUFJRDtvRkFDZ0Y7QUFFaEY7O09BRUc7QUFFSDtFQUNFLFVBQVU7Q0FDWDs7QUFFRDs7T0FFRztBQUVIOzs7Ozs7RUFNRSxlQUFlO0NBQ2hCOztBQUVEOzs7T0FHRztBQUVIO0VFOUVGLGVBWGlCO0VGb0dYLGlCQUFpQjtDQUVwQjs7QUFvQ0Q7b0ZBQ2dGO0FBdUNoRjs7T0FFRztBQUVIOztFQUVFLGVBQWU7Q0FDaEI7O0FBRUQ7O09BRUc7QUFFSDtFQUtJLGlCQ3ZMWTtDRHlMZjs7QUFFRDs7O09BR0c7QUFFSDtFQUNFLHdCQUF3QjtFQUFFLE9BQU87RUFDakMsVUFBVTtFQUFFLE9BQU87RUFDbkIsa0JBQWtCO0VBQUUsT0FBTztDQUM1Qjs7QUFFRDs7T0FFRztBQUVIO0VBQ0UsZUFBZTtDQUNoQjs7QUFhRDs7O09BR0c7QUFFSDtF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IGZ1bmN0aW9uIGZvciB0aGUgbm9ybWFsaXplKCkgbWl4aW4uXG5AZnVuY3Rpb24gX25vcm1hbGl6ZS1pbmNsdWRlKCRzZWN0aW9uLCAkZXhjbHVkZTogbnVsbCkge1xuICAvLyBJbml0aWFsaXplIHRoZSBnbG9iYWwgdmFyaWFibGVzIG5lZWRlZCBieSB0aGlzIGZ1bmN0aW9uLlxuICBAaWYgbm90IGdsb2JhbF92YXJpYWJsZV9leGlzdHMoX25vcm1hbGl6ZS1pbmNsdWRlKSB7XG4gICAgJF9ub3JtYWxpemUtaW5jbHVkZTogKCkgIWdsb2JhbDtcbiAgICAkX25vcm1hbGl6ZS1leGNsdWRlOiAoKSAhZ2xvYmFsO1xuICB9XG4gIC8vIFNpbmNlIHdlIGFyZSBnaXZlbiAyIHBhcmFtZXRlcnMsIHNldCB0aGUgZ2xvYmFsIHZhcmlhYmxlcy5cbiAgQGlmICRleGNsdWRlICE9IG51bGwge1xuICAgICRpbmNsdWRlOiAkc2VjdGlvbjtcbiAgICAvLyBTYXNzIGRvZXNuJ3QgaGF2ZSBzdGF0aWMgdmFyaWFibGVzLCBzbyB0aGUgd29yay1hcm91bmQgaXMgdG8gc3R1ZmYgdGhlc2VcbiAgICAvLyB2YWx1ZXMgaW50byBnbG9iYWwgdmFyaWFibGVzIHNvIHdlIGNhbiBhY2Nlc3MgdGhlbSBpbiBmdXR1cmUgY2FsbHMuXG4gICAgJF9ub3JtYWxpemUtaW5jbHVkZTogaWYodHlwZS1vZigkaW5jbHVkZSkgPT0gJ2xpc3QnLCAkaW5jbHVkZSwgKCRpbmNsdWRlKSkgIWdsb2JhbDtcbiAgICAkX25vcm1hbGl6ZS1leGNsdWRlOiBpZih0eXBlLW9mKCRleGNsdWRlKSA9PSAnbGlzdCcsICRleGNsdWRlLCAoJGV4Y2x1ZGUpKSAhZ2xvYmFsO1xuICAgIEByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8vIENoZWNrIGlmICRzZWN0aW9uIGlzIGluIHRoZSAkaW5jbHVkZSBsaXN0LlxuICBAaWYgaW5kZXgoJF9ub3JtYWxpemUtaW5jbHVkZSwgJHNlY3Rpb24pIHtcbiAgICBAcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gSWYgJGluY2x1ZGUgaXMgc2V0IHRvIChhbGwpLCBtYWtlIHN1cmUgJHNlY3Rpb24gaXMgbm90IGluICRleGNsdWRlLlxuICBAZWxzZSBpZiBub3QgaW5kZXgoJF9ub3JtYWxpemUtZXhjbHVkZSwgJHNlY3Rpb24pIGFuZCBpbmRleCgkX25vcm1hbGl6ZS1pbmNsdWRlLCBhbGwpIHtcbiAgICBAcmV0dXJuIHRydWU7XG4gIH1cbiAgQHJldHVybiBmYWxzZTtcbn1cblxuQG1peGluIG5vcm1hbGl6ZSgkaW5jbHVkZTogKGFsbCksICRleGNsdWRlOiAoKSkge1xuICAvLyBJbml0aWFsaXplIHRoZSBoZWxwZXIgZnVuY3Rpb24gYnkgcGFzc2luZyBpdCB0aGlzIG1peGluJ3MgcGFyYW1ldGVycy5cbiAgJGluaXQ6IF9ub3JtYWxpemUtaW5jbHVkZSgkaW5jbHVkZSwgJGV4Y2x1ZGUpO1xuXG4gIC8vIElmIHdlJ3ZlIGN1c3RvbWl6ZWQgYW55IGZvbnQgdmFyaWFibGVzLCB3ZSdsbCBuZWVkIGV4dHJhIHByb3BlcnRpZXMuXG4gIEBpZiAkYmFzZS1mb250LXNpemUgIT0gMTZweFxuICAgIG9yICRiYXNlLWxpbmUtaGVpZ2h0ICE9IDI0cHhcbiAgICBvciAkYmFzZS11bml0ICE9ICdlbSdcbiAgICBvciAkaDEtZm9udC1zaXplICE9IDIgICAgKiAkYmFzZS1mb250LXNpemVcbiAgICBvciAkaDItZm9udC1zaXplICE9IDEuNSAgKiAkYmFzZS1mb250LXNpemVcbiAgICBvciAkaDMtZm9udC1zaXplICE9IDEuMTcgKiAkYmFzZS1mb250LXNpemVcbiAgICBvciAkaDQtZm9udC1zaXplICE9IDEgICAgKiAkYmFzZS1mb250LXNpemVcbiAgICBvciAkaDUtZm9udC1zaXplICE9IDAuODMgKiAkYmFzZS1mb250LXNpemVcbiAgICBvciAkaDYtZm9udC1zaXplICE9IDAuNjcgKiAkYmFzZS1mb250LXNpemUge1xuICAgICRub3JtYWxpemUtdmVydGljYWwtcmh5dGhtOiB0cnVlICFnbG9iYWw7XG4gIH1cblxuICAvKiEgbm9ybWFsaXplLXNjc3MgfCBNSVQvR1BMdjIgTGljZW5zZSB8IGJpdC5seS9ub3JtYWxpemUtc2NzcyAqL1xuXG4gIEBpZiBfbm9ybWFsaXplLWluY2x1ZGUoZG9jdW1lbnQpIHtcbiAgICAvKiBEb2N1bWVudFxuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbiAgICAvKipcbiAgICAgKiAxLiBDaGFuZ2UgdGhlIGRlZmF1bHQgZm9udCBmYW1pbHkgaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgbGluZSBoZWlnaHQgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqIDMuIFByZXZlbnQgYWRqdXN0bWVudHMgb2YgZm9udCBzaXplIGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZXMgaW5cbiAgICAgKiAgICBJRSBvbiBXaW5kb3dzIFBob25lIGFuZCBpbiBpT1MuXG4gICAgICovXG5cbiAgICBodG1sIHtcbiAgICAgIGZvbnQtZmFtaWx5OiAkYmFzZS1mb250LWZhbWlseTsgLyogMSAqL1xuICAgICAgQGlmICRub3JtYWxpemUtdmVydGljYWwtcmh5dGhtIHtcbiAgICAgICAgLy8gQ29ycmVjdCBvbGQgYnJvd3NlciBidWcgdGhhdCBwcmV2ZW50ZWQgYWNjZXNzaWJsZSByZXNpemluZyBvZiB0ZXh0XG4gICAgICAgIC8vIHdoZW4gcm9vdCBmb250LXNpemUgaXMgc2V0IHdpdGggcHggb3IgZW0uXG4gICAgICAgIGZvbnQtc2l6ZTogKCRiYXNlLWZvbnQtc2l6ZSAvIDE2cHgpICogMTAwJTtcbiAgICAgICAgbGluZS1oZWlnaHQ6ICgkYmFzZS1saW5lLWhlaWdodCAvICRiYXNlLWZvbnQtc2l6ZSkgKiAxZW07IC8qIDIgKi9cbiAgICAgIH1cbiAgICAgIEBlbHNlIHtcbiAgICAgICAgbGluZS1oZWlnaHQ6IDEuMTU7IC8qIDIgKi9cbiAgICAgIH1cbiAgICAgIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvKiAzICovXG4gICAgICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDMgKi9cbiAgICB9XG4gIH1cblxuICBAaWYgX25vcm1hbGl6ZS1pbmNsdWRlKHNlY3Rpb25zKSB7XG4gICAgLyogU2VjdGlvbnNcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXG4gICAgICovXG5cbiAgICBib2R5IHtcbiAgICAgIG1hcmdpbjogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKi9cblxuICAgIGFydGljbGUsXG4gICAgYXNpZGUsXG4gICAgZm9vdGVyLFxuICAgIGhlYWRlcixcbiAgICBuYXYsXG4gICAgc2VjdGlvbiB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb3JyZWN0IHRoZSBmb250IHNpemUgYW5kIG1hcmdpbiBvbiBgaDFgIGVsZW1lbnRzIHdpdGhpbiBgc2VjdGlvbmAgYW5kXG4gICAgICogYGFydGljbGVgIGNvbnRleHRzIGluIENocm9tZSwgRmlyZWZveCwgYW5kIFNhZmFyaS5cbiAgICAgKi9cblxuICAgIGgxIHtcbiAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1mb250LXNpemUoJGgxLWZvbnQtc2l6ZSk7XG4gICAgICBAaWYgJG5vcm1hbGl6ZS12ZXJ0aWNhbC1yaHl0aG0ge1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbGluZS1oZWlnaHQoJGgxLWZvbnQtc2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIEBpZiAkbm9ybWFsaXplLXZlcnRpY2FsLXJoeXRobSB7XG4gICAgICAgIC8qIFNldCAxIHVuaXQgb2YgdmVydGljYWwgcmh5dGhtIG9uIHRoZSB0b3AgYW5kIGJvdHRvbSBtYXJnaW5zLiAqL1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbWFyZ2luKDEgMCwgJGgxLWZvbnQtc2l6ZSk7XG4gICAgICB9XG4gICAgICBAZWxzZSB7XG4gICAgICAgIG1hcmdpbjogMC42N2VtIDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQGlmICRub3JtYWxpemUtdmVydGljYWwtcmh5dGhtIHtcbiAgICAgIGgyIHtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWZvbnQtc2l6ZSgkaDItZm9udC1zaXplKTtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWxpbmUtaGVpZ2h0KCRoMi1mb250LXNpemUpO1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbWFyZ2luKDEgMCwgJGgyLWZvbnQtc2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIGgzIHtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWZvbnQtc2l6ZSgkaDMtZm9udC1zaXplKTtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWxpbmUtaGVpZ2h0KCRoMy1mb250LXNpemUpO1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbWFyZ2luKDEgMCwgJGgzLWZvbnQtc2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIGg0IHtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWZvbnQtc2l6ZSgkaDQtZm9udC1zaXplKTtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWxpbmUtaGVpZ2h0KCRoNC1mb250LXNpemUpO1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbWFyZ2luKDEgMCwgJGg0LWZvbnQtc2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIGg1IHtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWZvbnQtc2l6ZSgkaDUtZm9udC1zaXplKTtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWxpbmUtaGVpZ2h0KCRoNS1mb250LXNpemUpO1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbWFyZ2luKDEgMCwgJGg1LWZvbnQtc2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIGg2IHtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWZvbnQtc2l6ZSgkaDYtZm9udC1zaXplKTtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLWxpbmUtaGVpZ2h0KCRoNi1mb250LXNpemUpO1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbWFyZ2luKDEgMCwgJGg2LWZvbnQtc2l6ZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQGlmIF9ub3JtYWxpemUtaW5jbHVkZShncm91cGluZykge1xuICAgIC8qIEdyb3VwaW5nIGNvbnRlbnRcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gICAgQGlmICRub3JtYWxpemUtdmVydGljYWwtcmh5dGhtIHtcbiAgICAgIC8qKlxuICAgICAgICogU2V0IDEgdW5pdCBvZiB2ZXJ0aWNhbCByaHl0aG0gb24gdGhlIHRvcCBhbmQgYm90dG9tIG1hcmdpbi5cbiAgICAgICAqL1xuXG4gICAgICBibG9ja3F1b3RlIHtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLW1hcmdpbigxICRpbmRlbnQtYW1vdW50KTtcbiAgICAgIH1cblxuICAgICAgZGwsXG4gICAgICBvbCxcbiAgICAgIHVsIHtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLW1hcmdpbigxIDApO1xuICAgICAgfVxuXG4gICAgICAvKipcbiAgICAgICAqIFR1cm4gb2ZmIG1hcmdpbnMgb24gbmVzdGVkIGxpc3RzLlxuICAgICAgICovXG5cbiAgICAgIG9sLFxuICAgICAgdWwge1xuICAgICAgICBvbCxcbiAgICAgICAgdWwge1xuICAgICAgICAgIG1hcmdpbjogMDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBkZCB7XG4gICAgICAgIG1hcmdpbjogMCAwIDAgJGluZGVudC1hbW91bnQ7XG4gICAgICB9XG5cbiAgICAgIG9sLFxuICAgICAgdWwge1xuICAgICAgICBwYWRkaW5nOiAwIDAgMCAkaW5kZW50LWFtb3VudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKi9cblxuICAgIGZpZ2NhcHRpb24sXG4gICAgZmlndXJlIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBtYXJnaW4gaW4gSUUgOC5cbiAgICAgKi9cblxuICAgIGZpZ3VyZSB7XG4gICAgICBAaWYgJG5vcm1hbGl6ZS12ZXJ0aWNhbC1yaHl0aG0ge1xuICAgICAgICBAaW5jbHVkZSBub3JtYWxpemUtbWFyZ2luKDEgJGluZGVudC1hbW91bnQpO1xuICAgICAgfVxuICAgICAgQGVsc2Uge1xuICAgICAgICBtYXJnaW46IDFlbSAkaW5kZW50LWFtb3VudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAxLiBBZGQgdGhlIGNvcnJlY3QgYm94IHNpemluZyBpbiBGaXJlZm94LlxuICAgICAqIDIuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UgYW5kIElFLlxuICAgICAqL1xuXG4gICAgaHIge1xuICAgICAgYm94LXNpemluZzogY29udGVudC1ib3g7IC8qIDEgKi9cbiAgICAgIGhlaWdodDogMDsgLyogMSAqL1xuICAgICAgb3ZlcmZsb3c6IHZpc2libGU7IC8qIDIgKi9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRS5cbiAgICAgKi9cblxuICAgIG1haW4ge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuXG4gICAgQGlmICRub3JtYWxpemUtdmVydGljYWwtcmh5dGhtIHtcbiAgICAgIC8qKlxuICAgICAgICogU2V0IDEgdW5pdCBvZiB2ZXJ0aWNhbCByaHl0aG0gb24gdGhlIHRvcCBhbmQgYm90dG9tIG1hcmdpbi5cbiAgICAgICAqL1xuXG4gICAgICBwLFxuICAgICAgcHJlIHtcbiAgICAgICAgQGluY2x1ZGUgbm9ybWFsaXplLW1hcmdpbigxIDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqL1xuXG4gICAgcHJlIHtcbiAgICAgIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTsgLyogMSAqL1xuICAgICAgZm9udC1zaXplOiAxZW07IC8qIDIgKi9cbiAgICB9XG4gIH1cblxuICBAaWYgX25vcm1hbGl6ZS1pbmNsdWRlKGxpbmtzKSB7XG4gICAgLyogTGlua3NcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gICAgLyoqXG4gICAgICogMS4gUmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgb24gYWN0aXZlIGxpbmtzIGluIElFIDEwLlxuICAgICAqIDIuIFJlbW92ZSBnYXBzIGluIGxpbmtzIHVuZGVybGluZSBpbiBpT1MgOCsgYW5kIFNhZmFyaSA4Ky5cbiAgICAgKi9cblxuICAgIGEge1xuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IC8qIDEgKi9cbiAgICAgIC13ZWJraXQtdGV4dC1kZWNvcmF0aW9uLXNraXA6IG9iamVjdHM7IC8qIDIgKi9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIG91dGxpbmUgb24gZm9jdXNlZCBsaW5rcyB3aGVuIHRoZXkgYXJlIGFsc28gYWN0aXZlIG9yIGhvdmVyZWRcbiAgICAgKiBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS5cbiAgICAgKi9cblxuICAgIGE6YWN0aXZlLFxuICAgIGE6aG92ZXIge1xuICAgICAgb3V0bGluZS13aWR0aDogMDtcbiAgICB9XG4gIH1cblxuICBAaWYgX25vcm1hbGl6ZS1pbmNsdWRlKHRleHQpIHtcbiAgICAvKiBUZXh0LWxldmVsIHNlbWFudGljc1xuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbiAgICAvKipcbiAgICAgKiAxLiBSZW1vdmUgdGhlIGJvdHRvbSBib3JkZXIgaW4gRmlyZWZveCAzOS0uXG4gICAgICogMi4gQWRkIHRoZSBjb3JyZWN0IHRleHQgZGVjb3JhdGlvbiBpbiBDaHJvbWUsIEVkZ2UsIElFLCBPcGVyYSwgYW5kIFNhZmFyaS5cbiAgICAgKi9cblxuICAgIGFiYnJbdGl0bGVdIHtcbiAgICAgIGJvcmRlci1ib3R0b206IG5vbmU7IC8qIDEgKi9cbiAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lOyAvKiAyICovXG4gICAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZSBkb3R0ZWQ7IC8qIDIgKi9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcmV2ZW50IHRoZSBkdXBsaWNhdGUgYXBwbGljYXRpb24gb2YgYGJvbGRlcmAgYnkgdGhlIG5leHQgcnVsZSBpbiBTYWZhcmkgNi5cbiAgICAgKi9cblxuICAgIGIsXG4gICAgc3Ryb25nIHtcbiAgICAgIGZvbnQtd2VpZ2h0OiBpbmhlcml0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBmb250IHdlaWdodCBpbiBDaHJvbWUsIEVkZ2UsIGFuZCBTYWZhcmkuXG4gICAgICovXG5cbiAgICBiLFxuICAgIHN0cm9uZyB7XG4gICAgICBmb250LXdlaWdodDogYm9sZGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqL1xuXG4gICAgY29kZSxcbiAgICBrYmQsXG4gICAgc2FtcCB7XG4gICAgICBmb250LWZhbWlseTogbW9ub3NwYWNlLCBtb25vc3BhY2U7IC8qIDEgKi9cbiAgICAgIGZvbnQtc2l6ZTogMWVtOyAvKiAyICovXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgc3R5bGUgaW4gQW5kcm9pZCA0LjMtLlxuICAgICAqL1xuXG4gICAgZGZuIHtcbiAgICAgIGZvbnQtc3R5bGU6IGl0YWxpYztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgYmFja2dyb3VuZCBhbmQgY29sb3IgaW4gSUUgOS0uXG4gICAgICovXG5cbiAgICBtYXJrIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmZjA7XG4gICAgICBjb2xvcjogIzAwMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAgICAgKi9cblxuICAgIHNtYWxsIHtcbiAgICAgIGZvbnQtc2l6ZTogODAlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGVsZW1lbnRzIGZyb20gYWZmZWN0aW5nIHRoZSBsaW5lIGhlaWdodCBpblxuICAgICAqIGFsbCBicm93c2Vycy5cbiAgICAgKi9cblxuICAgIHN1YixcbiAgICBzdXAge1xuICAgICAgZm9udC1zaXplOiA3NSU7XG4gICAgICBsaW5lLWhlaWdodDogMDtcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbiAgICB9XG5cbiAgICBzdWIge1xuICAgICAgYm90dG9tOiAtMC4yNWVtO1xuICAgIH1cblxuICAgIHN1cCB7XG4gICAgICB0b3A6IC0wLjVlbTtcbiAgICB9XG4gIH1cblxuICBAaWYgX25vcm1hbGl6ZS1pbmNsdWRlKGVtYmVkZGVkKSB7XG4gICAgLyogRW1iZWRkZWQgY29udGVudFxuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKi9cblxuICAgIGF1ZGlvLFxuICAgIHZpZGVvIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBpT1MgNC03LlxuICAgICAqL1xuXG4gICAgYXVkaW86bm90KFtjb250cm9sc10pIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICBoZWlnaHQ6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBib3JkZXIgb24gaW1hZ2VzIGluc2lkZSBsaW5rcyBpbiBJRSAxMC0uXG4gICAgICovXG5cbiAgICBpbWcge1xuICAgICAgYm9yZGVyLXN0eWxlOiBub25lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEhpZGUgdGhlIG92ZXJmbG93IGluIElFLlxuICAgICAqL1xuXG4gICAgc3ZnOm5vdCg6cm9vdCkge1xuICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICB9XG4gIH1cblxuICBAaWYgX25vcm1hbGl6ZS1pbmNsdWRlKGZvcm1zKSB7XG4gICAgLyogRm9ybXNcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4gICAgLyoqXG4gICAgICogMS4gQ2hhbmdlIHRoZSBmb250IHN0eWxlcyBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS5cbiAgICAgKiAyLiBSZW1vdmUgdGhlIG1hcmdpbiBpbiBGaXJlZm94IGFuZCBTYWZhcmkuXG4gICAgICovXG5cbiAgICBidXR0b24sXG4gICAgaW5wdXQsXG4gICAgb3B0Z3JvdXAsXG4gICAgc2VsZWN0LFxuICAgIHRleHRhcmVhIHtcbiAgICAgIGZvbnQtZmFtaWx5OiAkYmFzZS1mb250LWZhbWlseTsgLyogMSAqL1xuICAgICAgZm9udC1zaXplOiAxMDAlOyAvKiAxICovXG4gICAgICBAaWYgJG5vcm1hbGl6ZS12ZXJ0aWNhbC1yaHl0aG0ge1xuICAgICAgICBsaW5lLWhlaWdodDogKCRiYXNlLWxpbmUtaGVpZ2h0IC8gJGJhc2UtZm9udC1zaXplKSAqIDFlbTsgLyogMSAqL1xuICAgICAgfVxuICAgICAgQGVsc2Uge1xuICAgICAgICBsaW5lLWhlaWdodDogMS4xNTsgLyogMSAqL1xuICAgICAgfVxuICAgICAgbWFyZ2luOiAwOyAvKiAyICovXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvdyB0aGUgb3ZlcmZsb3cgaW4gSUUuXG4gICAgICovXG5cbiAgICBidXR0b24ge1xuICAgICAgb3ZlcmZsb3c6IHZpc2libGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBFZGdlLCBGaXJlZm94LCBhbmQgSUUuXG4gICAgICogMS4gUmVtb3ZlIHRoZSBpbmhlcml0YW5jZSBvZiB0ZXh0IHRyYW5zZm9ybSBpbiBGaXJlZm94LlxuICAgICAqL1xuXG4gICAgYnV0dG9uLFxuICAgIHNlbGVjdCB7IC8qIDEgKi9cbiAgICAgIHRleHQtdHJhbnNmb3JtOiBub25lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIDEuIFByZXZlbnQgYSBXZWJLaXQgYnVnIHdoZXJlICgyKSBkZXN0cm95cyBuYXRpdmUgYGF1ZGlvYCBhbmQgYHZpZGVvYFxuICAgICAqICAgIGNvbnRyb2xzIGluIEFuZHJvaWQgNC5cbiAgICAgKiAyLiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxuICAgICAqL1xuXG4gICAgYnV0dG9uLFxuICAgIGh0bWwgW3R5cGU9XCJidXR0b25cIl0sIC8qIDEgKi9cbiAgICBbdHlwZT1cInJlc2V0XCJdLFxuICAgIFt0eXBlPVwic3VibWl0XCJdIHtcbiAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAyICovXG4gICAgfVxuXG4gICAgYnV0dG9uLFxuICAgIFt0eXBlPVwiYnV0dG9uXCJdLFxuICAgIFt0eXBlPVwicmVzZXRcIl0sXG4gICAgW3R5cGU9XCJzdWJtaXRcIl0ge1xuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZSB0aGUgaW5uZXIgYm9yZGVyIGFuZCBwYWRkaW5nIGluIEZpcmVmb3guXG4gICAgICAgKi9cblxuICAgICAgJjo6LW1vei1mb2N1cy1pbm5lciB7XG4gICAgICAgIGJvcmRlci1zdHlsZTogbm9uZTtcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICAgIH1cblxuICAgICAgLyoqXG4gICAgICAgKiBSZXN0b3JlIHRoZSBmb2N1cyBzdHlsZXMgdW5zZXQgYnkgdGhlIHByZXZpb3VzIHJ1bGUuXG4gICAgICAgKi9cblxuICAgICAgJjotbW96LWZvY3VzcmluZyB7XG4gICAgICAgIG91dGxpbmU6IDFweCBkb3R0ZWQgQnV0dG9uVGV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG93IHRoZSBvdmVyZmxvdyBpbiBFZGdlLlxuICAgICAqL1xuXG4gICAgaW5wdXQge1xuICAgICAgb3ZlcmZsb3c6IHZpc2libGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogMS4gQWRkIHRoZSBjb3JyZWN0IGJveCBzaXppbmcgaW4gSUUgMTAtLlxuICAgICAqIDIuIFJlbW92ZSB0aGUgcGFkZGluZyBpbiBJRSAxMC0uXG4gICAgICovXG5cbiAgICBbdHlwZT1cImNoZWNrYm94XCJdLFxuICAgIFt0eXBlPVwicmFkaW9cIl0ge1xuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xuICAgICAgcGFkZGluZzogMDsgLyogMiAqL1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcnJlY3QgdGhlIGN1cnNvciBzdHlsZSBvZiBpbmNyZW1lbnQgYW5kIGRlY3JlbWVudCBidXR0b25zIGluIENocm9tZS5cbiAgICAgKi9cblxuICAgIFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuICAgIFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcbiAgICAgIGhlaWdodDogYXV0bztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAxLiBDb3JyZWN0IHRoZSBvZGQgYXBwZWFyYW5jZSBpbiBDaHJvbWUgYW5kIFNhZmFyaS5cbiAgICAgKiAyLiBDb3JyZWN0IHRoZSBvdXRsaW5lIHN0eWxlIGluIFNhZmFyaS5cbiAgICAgKi9cblxuICAgIFt0eXBlPVwic2VhcmNoXCJdIHtcbiAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkOyAvKiAxICovXG4gICAgICBvdXRsaW5lLW9mZnNldDogLTJweDsgLyogMiAqL1xuXG4gICAgICAvKipcbiAgICAgICAqIFJlbW92ZSB0aGUgaW5uZXIgcGFkZGluZyBhbmQgY2FuY2VsIGJ1dHRvbnMgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gbWFjT1MuXG4gICAgICAgKi9cblxuICAgICAgJjo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbixcbiAgICAgICY6Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xuICAgICAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogMS4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cbiAgICAgKiAyLiBDaGFuZ2UgZm9udCBwcm9wZXJ0aWVzIHRvIGBpbmhlcml0YCBpbiBTYWZhcmkuXG4gICAgICovXG5cbiAgICA6Oi13ZWJraXQtZmlsZS11cGxvYWQtYnV0dG9uIHtcbiAgICAgIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uOyAvKiAxICovXG4gICAgICBmb250OiBpbmhlcml0OyAvKiAyICovXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHRoZSBib3JkZXIsIG1hcmdpbiwgYW5kIHBhZGRpbmcgaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXG4gICAgICovXG5cbiAgICBmaWVsZHNldCB7XG4gICAgICBib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xuICAgICAgbWFyZ2luOiAwIDJweDtcbiAgICAgIHBhZGRpbmc6IDAuMzVlbSAwLjYyNWVtIDAuNzVlbTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAxLiBDb3JyZWN0IHRoZSB0ZXh0IHdyYXBwaW5nIGluIEVkZ2UgYW5kIElFLlxuICAgICAqIDIuIENvcnJlY3QgdGhlIGNvbG9yIGluaGVyaXRhbmNlIGZyb20gYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBJRS5cbiAgICAgKiAzLiBSZW1vdmUgdGhlIHBhZGRpbmcgc28gZGV2ZWxvcGVycyBhcmUgbm90IGNhdWdodCBvdXQgd2hlbiB0aGV5IHplcm8gb3V0XG4gICAgICogICAgYGZpZWxkc2V0YCBlbGVtZW50cyBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICovXG5cbiAgICBsZWdlbmQge1xuICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xuICAgICAgZGlzcGxheTogdGFibGU7IC8qIDEgKi9cbiAgICAgIG1heC13aWR0aDogMTAwJTsgLyogMSAqL1xuICAgICAgcGFkZGluZzogMDsgLyogMyAqL1xuICAgICAgY29sb3I6IGluaGVyaXQ7IC8qIDIgKi9cbiAgICAgIHdoaXRlLXNwYWNlOiBub3JtYWw7IC8qIDEgKi9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAxLiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKiAyLiBBZGQgdGhlIGNvcnJlY3QgdmVydGljYWwgYWxpZ25tZW50IGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxuICAgICAqL1xuXG4gICAgcHJvZ3Jlc3Mge1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrOyAvKiAxICovXG4gICAgICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7IC8qIDIgKi9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFLlxuICAgICAqL1xuXG4gICAgdGV4dGFyZWEge1xuICAgICAgb3ZlcmZsb3c6IGF1dG87XG4gICAgfVxuICB9XG5cbiAgQGlmIF9ub3JtYWxpemUtaW5jbHVkZShpbnRlcmFjdGl2ZSkge1xuICAgIC8qIEludGVyYWN0aXZlXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICAgIC8qXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gRWRnZSwgSUUsIGFuZCBGaXJlZm94LlxuICAgICAqL1xuXG4gICAgZGV0YWlscyB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIGFsbCBicm93c2Vycy5cbiAgICAgKi9cblxuICAgIHN1bW1hcnkge1xuICAgICAgZGlzcGxheTogbGlzdC1pdGVtO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gICAgICovXG5cbiAgICBtZW51IHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuXG4gICAgICBAaWYgJG5vcm1hbGl6ZS12ZXJ0aWNhbC1yaHl0aG0ge1xuICAgICAgICAvKlxuICAgICAgICAgKiAxLiBTZXQgMSB1bml0IG9mIHZlcnRpY2FsIHJoeXRobSBvbiB0aGUgdG9wIGFuZCBib3R0b20gbWFyZ2luLlxuICAgICAgICAgKiAyLiBTZXQgY29uc2lzdGVudCBzcGFjZSBmb3IgdGhlIGxpc3Qgc3R5bGUgaW1hZ2UuXG4gICAgICAgICAqL1xuXG4gICAgICAgIEBpbmNsdWRlIG5vcm1hbGl6ZS1tYXJnaW4oMSAwKTsgLyogMSAqL1xuICAgICAgICBwYWRkaW5nOiAwIDAgMCAkaW5kZW50LWFtb3VudDsgLyogMiAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUdXJuIG9mZiBtYXJnaW5zIG9uIG5lc3RlZCBsaXN0cy5cbiAgICAgICAgICovXG5cbiAgICAgICAgbWVudSAmLFxuICAgICAgICBvbCAmLFxuICAgICAgICB1bCAmIHtcbiAgICAgICAgICBtYXJnaW46IDA7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAaWYgX25vcm1hbGl6ZS1pbmNsdWRlKHNjcmlwdGluZykge1xuICAgIC8qIFNjcmlwdGluZ1xuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbiAgICAvKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKi9cblxuICAgIGNhbnZhcyB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUuXG4gICAgICovXG5cbiAgICB0ZW1wbGF0ZSB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbiAgfVxuXG4gIEBpZiBfbm9ybWFsaXplLWluY2x1ZGUoaGlkZGVuKSB7XG4gICAgLyogSGlkZGVuXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuICAgIC8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDEwLS5cbiAgICAgKi9cblxuICAgIFtoaWRkZW5dIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuICB9XG59XG4iLCIvL1xuLy8gVmFyaWFibGVzXG4vL1xuLy8gWW91IGNhbiBvdmVycmlkZSB0aGUgZGVmYXVsdCB2YWx1ZXMgYnkgc2V0dGluZyB0aGUgdmFyaWFibGVzIGluIHlvdXIgU2Fzc1xuLy8gYmVmb3JlIGltcG9ydGluZyB0aGUgbm9ybWFsaXplLXNjc3MgbGlicmFyeS5cblxuLy8gVGhlIGZvbnQgc2l6ZSBzZXQgb24gdGhlIHJvb3QgaHRtbCBlbGVtZW50LlxuJGJhc2UtZm9udC1zaXplOiAxNnB4ICFkZWZhdWx0O1xuXG4vLyBUaGUgYmFzZSBsaW5lIGhlaWdodCBkZXRlcm1pbmVzIHRoZSBiYXNpYyB1bml0IG9mIHZlcnRpY2FsIHJoeXRobS5cbiRiYXNlLWxpbmUtaGVpZ2h0OiAyNHB4ICFkZWZhdWx0O1xuXG4vLyBUaGUgbGVuZ3RoIHVuaXQgaW4gd2hpY2ggdG8gb3V0cHV0IHZlcnRpY2FsIHJoeXRobSB2YWx1ZXMuXG4vLyBTdXBwb3J0ZWQgdmFsdWVzOiBweCwgZW0sIHJlbS5cbiRiYXNlLXVuaXQ6ICdlbScgIWRlZmF1bHQ7XG5cbi8vIFRoZSBkZWZhdWx0IGZvbnQgZmFtaWx5LlxuJGJhc2UtZm9udC1mYW1pbHk6IHNhbnMtc2VyaWYgIWRlZmF1bHQ7XG5cbi8vIFRoZSBmb250IHNpemVzIGZvciBoMS1oNi5cbiRoMS1mb250LXNpemU6IDIgICAgKiAkYmFzZS1mb250LXNpemUgIWRlZmF1bHQ7XG4kaDItZm9udC1zaXplOiAxLjUgICogJGJhc2UtZm9udC1zaXplICFkZWZhdWx0O1xuJGgzLWZvbnQtc2l6ZTogMS4xNyAqICRiYXNlLWZvbnQtc2l6ZSAhZGVmYXVsdDtcbiRoNC1mb250LXNpemU6IDEgICAgKiAkYmFzZS1mb250LXNpemUgIWRlZmF1bHQ7XG4kaDUtZm9udC1zaXplOiAwLjgzICogJGJhc2UtZm9udC1zaXplICFkZWZhdWx0O1xuJGg2LWZvbnQtc2l6ZTogMC42NyAqICRiYXNlLWZvbnQtc2l6ZSAhZGVmYXVsdDtcblxuLy8gVGhlIGFtb3VudCBsaXN0cyBhbmQgYmxvY2txdW90ZXMgYXJlIGluZGVudGVkLlxuJGluZGVudC1hbW91bnQ6IDQwcHggIWRlZmF1bHQ7XG5cbi8vIFRoZSBmb2xsb3dpbmcgdmFyaWFibGUgY29udHJvbHMgd2hldGhlciBub3JtYWxpemUtc2NzcyB3aWxsIG91dHB1dFxuLy8gZm9udC1zaXplcywgbGluZS1oZWlnaHRzIGFuZCBibG9jay1sZXZlbCB0b3AvYm90dG9tIG1hcmdpbnMgdGhhdCBmb3JtIGEgYmFzaWNcbi8vIHZlcnRpY2FsIHJoeXRobSBvbiB0aGUgcGFnZSwgd2hpY2ggZGlmZmVycyBmcm9tIHRoZSBvcmlnaW5hbCBOb3JtYWxpemUuY3NzLlxuLy8gSG93ZXZlciwgY2hhbmdpbmcgYW55IG9mIHRoZSB2YXJpYWJsZXMgYWJvdmUgd2lsbCBjYXVzZVxuLy8gJG5vcm1hbGl6ZS12ZXJ0aWNhbC1yaHl0aG0gdG8gYmUgYXV0b21hdGljYWxseSBzZXQgdG8gdHJ1ZS5cbiRub3JtYWxpemUtdmVydGljYWwtcmh5dGhtOiBmYWxzZSAhZGVmYXVsdDtcbiIsIi8vXG4vLyBWZXJ0aWNhbCBSaHl0aG1cbi8vXG4vLyBUaGlzIGlzIHRoZSBtaW5pbWFsIGFtb3VudCBvZiBjb2RlIG5lZWRlZCB0byBjcmVhdGUgdmVydGljYWwgcmh5dGhtIGluIG91clxuLy8gQ1NTLiBJZiB5b3UgYXJlIGxvb2tpbmcgZm9yIGEgcm9idXN0IHNvbHV0aW9uLCBsb29rIGF0IHRoZSBleGNlbGxlbnQgVHlwZXlcbi8vIGxpYnJhcnkuIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2pwdGFyYW50by90eXBleVxuXG5AZnVuY3Rpb24gbm9ybWFsaXplLXJoeXRobSgkdmFsdWUsICRyZWxhdGl2ZS10bzogJGJhc2UtZm9udC1zaXplLCAkdW5pdDogJGJhc2UtdW5pdCkge1xuICBAaWYgdW5pdCgkdmFsdWUpICE9IHB4IHtcbiAgICBAZXJyb3IgXCJUaGUgbm9ybWFsaXplIHZlcnRpY2FsLXJoeXRobSBtb2R1bGUgb25seSBzdXBwb3J0cyBweCBpbnB1dHMuIFRoZSB0eXBleSBsaWJyYXJ5IGlzIGJldHRlci5cIjtcbiAgfVxuICBAaWYgJHVuaXQgPT0gcmVtIHtcbiAgICBAcmV0dXJuICgkdmFsdWUgLyAkYmFzZS1mb250LXNpemUpICogMXJlbTtcbiAgfVxuICBAZWxzZSBpZiAkdW5pdCA9PSBlbSB7XG4gICAgQHJldHVybiAoJHZhbHVlIC8gJHJlbGF0aXZlLXRvKSAqIDFlbTtcbiAgfVxuICBAZWxzZSB7IC8vICR1bml0ID09IHB4XG4gICAgQHJldHVybiAkdmFsdWU7XG4gIH1cbn1cblxuQG1peGluIG5vcm1hbGl6ZS1mb250LXNpemUoJHZhbHVlLCAkcmVsYXRpdmUtdG86ICRiYXNlLWZvbnQtc2l6ZSkge1xuICBAaWYgdW5pdCgkdmFsdWUpICE9ICdweCcge1xuICAgIEBlcnJvciBcIm5vcm1hbGl6ZS1mb250LXNpemUoKSBvbmx5IHN1cHBvcnRzIHB4IGlucHV0cy4gVGhlIHR5cGV5IGxpYnJhcnkgaXMgYmV0dGVyLlwiO1xuICB9XG4gIGZvbnQtc2l6ZTogbm9ybWFsaXplLXJoeXRobSgkdmFsdWUsICRyZWxhdGl2ZS10byk7XG59XG5cbkBtaXhpbiBub3JtYWxpemUtcmh5dGhtKCRwcm9wZXJ0eSwgJHZhbHVlcywgJHJlbGF0aXZlLXRvOiAkYmFzZS1mb250LXNpemUpIHtcbiAgJHZhbHVlLWxpc3Q6ICR2YWx1ZXM7XG4gICRzZXA6IHNwYWNlO1xuICBAaWYgdHlwZS1vZigkdmFsdWVzKSA9PSAnbGlzdCcge1xuICAgICRzZXA6IGxpc3Qtc2VwYXJhdG9yKCR2YWx1ZXMpO1xuICB9XG4gIEBlbHNlIHtcbiAgICAkdmFsdWUtbGlzdDogYXBwZW5kKCgpLCAkdmFsdWVzKTtcbiAgfVxuXG4gICRub3JtYWxpemVkLXZhbHVlczogKCk7XG4gIEBlYWNoICR2YWx1ZSBpbiAkdmFsdWUtbGlzdCB7XG4gICAgQGlmIHVuaXRsZXNzKCR2YWx1ZSkgYW5kICR2YWx1ZSAhPSAwIHtcbiAgICAgICR2YWx1ZTogJHZhbHVlICogbm9ybWFsaXplLXJoeXRobSgkYmFzZS1saW5lLWhlaWdodCwgJHJlbGF0aXZlLXRvKTtcbiAgICB9XG4gICAgJG5vcm1hbGl6ZWQtdmFsdWVzOiBhcHBlbmQoJG5vcm1hbGl6ZWQtdmFsdWVzLCAkdmFsdWUsICRzZXApO1xuICB9XG4gICN7JHByb3BlcnR5fTogJG5vcm1hbGl6ZWQtdmFsdWVzO1xufVxuXG5AbWl4aW4gbm9ybWFsaXplLW1hcmdpbigkdmFsdWVzLCAkcmVsYXRpdmUtdG86ICRiYXNlLWZvbnQtc2l6ZSkge1xuICBAaW5jbHVkZSBub3JtYWxpemUtcmh5dGhtKG1hcmdpbiwgJHZhbHVlcywgJHJlbGF0aXZlLXRvKTtcbn1cblxuQG1peGluIG5vcm1hbGl6ZS1saW5lLWhlaWdodCgkZm9udC1zaXplLCAkbWluLWxpbmUtcGFkZGluZzogMnB4KSB7XG4gICRsaW5lczogY2VpbCgkZm9udC1zaXplIC8gJGJhc2UtbGluZS1oZWlnaHQpO1xuICAvLyBJZiBsaW5lcyBhcmUgY3JhbXBlZCBpbmNsdWRlIHNvbWUgZXh0cmEgbGVhZGluZy5cbiAgQGlmICgkbGluZXMgKiAkYmFzZS1saW5lLWhlaWdodCAtICRmb250LXNpemUpIDwgKCRtaW4tbGluZS1wYWRkaW5nICogMikge1xuICAgICRsaW5lczogJGxpbmVzICsgMTtcbiAgfVxuICBAaW5jbHVkZSBub3JtYWxpemUtcmh5dGhtKGxpbmUtaGVpZ2h0LCAkbGluZXMsICRmb250LXNpemUpO1xufVxuIiwiLyohIG5vcm1hbGl6ZS1zY3NzIHwgTUlUL0dQTHYyIExpY2Vuc2UgfCBiaXQubHkvbm9ybWFsaXplLXNjc3MgKi9cbi8qIERvY3VtZW50XG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIDEuIENoYW5nZSB0aGUgZGVmYXVsdCBmb250IGZhbWlseSBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS5cbiAgICAgKiAyLiBDb3JyZWN0IHRoZSBsaW5lIGhlaWdodCBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICogMy4gUHJldmVudCBhZGp1c3RtZW50cyBvZiBmb250IHNpemUgYWZ0ZXIgb3JpZW50YXRpb24gY2hhbmdlcyBpblxuICAgICAqICAgIElFIG9uIFdpbmRvd3MgUGhvbmUgYW5kIGluIGlPUy5cbiAgICAgKi9cbmh0bWwge1xuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcbiAgLyogMSAqL1xuICBsaW5lLWhlaWdodDogMS4xNTtcbiAgLyogMiAqL1xuICAtbXMtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgLyogMyAqL1xuICAtd2Via2l0LXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7XG4gIC8qIDMgKi9cbn1cblxuLyogU2VjdGlvbnNcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gICAgICogUmVtb3ZlIHRoZSBtYXJnaW4gaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXG4gICAgICovXG5ib2R5IHtcbiAgbWFyZ2luOiAwO1xufVxuXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKi9cbmFydGljbGUsXG5hc2lkZSxcbmZvb3RlcixcbmhlYWRlcixcbm5hdixcbnNlY3Rpb24ge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLyoqXG4gICAgICogQ29ycmVjdCB0aGUgZm9udCBzaXplIGFuZCBtYXJnaW4gb24gYGgxYCBlbGVtZW50cyB3aXRoaW4gYHNlY3Rpb25gIGFuZFxuICAgICAqIGBhcnRpY2xlYCBjb250ZXh0cyBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBTYWZhcmkuXG4gICAgICovXG5oMSB7XG4gIGZvbnQtc2l6ZTogMmVtO1xuICBtYXJnaW46IDAuNjdlbSAwO1xufVxuXG4vKiBHcm91cGluZyBjb250ZW50XG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxuICAgICAqL1xuZmlnY2FwdGlvbixcbmZpZ3VyZSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgbWFyZ2luIGluIElFIDguXG4gICAgICovXG5maWd1cmUge1xuICBtYXJnaW46IDFlbSA0MHB4O1xufVxuXG4vKipcbiAgICAgKiAxLiBBZGQgdGhlIGNvcnJlY3QgYm94IHNpemluZyBpbiBGaXJlZm94LlxuICAgICAqIDIuIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UgYW5kIElFLlxuICAgICAqL1xuaHIge1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgLyogMSAqL1xuICBoZWlnaHQ6IDA7XG4gIC8qIDEgKi9cbiAgb3ZlcmZsb3c6IHZpc2libGU7XG4gIC8qIDIgKi9cbn1cblxuLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUuXG4gICAgICovXG5tYWluIHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIGluaGVyaXRhbmNlIGFuZCBzY2FsaW5nIG9mIGZvbnQgc2l6ZSBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgb2RkIGBlbWAgZm9udCBzaXppbmcgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqL1xucHJlIHtcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlO1xuICAvKiAxICovXG4gIGZvbnQtc2l6ZTogMWVtO1xuICAvKiAyICovXG59XG5cbi8qIExpbmtzXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIDEuIFJlbW92ZSB0aGUgZ3JheSBiYWNrZ3JvdW5kIG9uIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbiAgICAgKiAyLiBSZW1vdmUgZ2FwcyBpbiBsaW5rcyB1bmRlcmxpbmUgaW4gaU9TIDgrIGFuZCBTYWZhcmkgOCsuXG4gICAgICovXG5hIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gIC8qIDEgKi9cbiAgLXdlYmtpdC10ZXh0LWRlY29yYXRpb24tc2tpcDogb2JqZWN0cztcbiAgLyogMiAqL1xufVxuXG4vKipcbiAgICAgKiBSZW1vdmUgdGhlIG91dGxpbmUgb24gZm9jdXNlZCBsaW5rcyB3aGVuIHRoZXkgYXJlIGFsc28gYWN0aXZlIG9yIGhvdmVyZWRcbiAgICAgKiBpbiBhbGwgYnJvd3NlcnMgKG9waW5pb25hdGVkKS5cbiAgICAgKi9cbmE6YWN0aXZlLFxuYTpob3ZlciB7XG4gIG91dGxpbmUtd2lkdGg6IDA7XG59XG5cbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIDEuIFJlbW92ZSB0aGUgYm90dG9tIGJvcmRlciBpbiBGaXJlZm94IDM5LS5cbiAgICAgKiAyLiBBZGQgdGhlIGNvcnJlY3QgdGV4dCBkZWNvcmF0aW9uIGluIENocm9tZSwgRWRnZSwgSUUsIE9wZXJhLCBhbmQgU2FmYXJpLlxuICAgICAqL1xuYWJiclt0aXRsZV0ge1xuICBib3JkZXItYm90dG9tOiBub25lO1xuICAvKiAxICovXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xuICAvKiAyICovXG4gIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lIGRvdHRlZDtcbiAgLyogMiAqL1xufVxuXG4vKipcbiAgICAgKiBQcmV2ZW50IHRoZSBkdXBsaWNhdGUgYXBwbGljYXRpb24gb2YgYGJvbGRlcmAgYnkgdGhlIG5leHQgcnVsZSBpbiBTYWZhcmkgNi5cbiAgICAgKi9cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogaW5oZXJpdDtcbn1cblxuLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGZvbnQgd2VpZ2h0IGluIENocm9tZSwgRWRnZSwgYW5kIFNhZmFyaS5cbiAgICAgKi9cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogYm9sZGVyO1xufVxuXG4vKipcbiAgICAgKiAxLiBDb3JyZWN0IHRoZSBpbmhlcml0YW5jZSBhbmQgc2NhbGluZyBvZiBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICAgICAqIDIuIENvcnJlY3QgdGhlIG9kZCBgZW1gIGZvbnQgc2l6aW5nIGluIGFsbCBicm93c2Vycy5cbiAgICAgKi9cbmNvZGUsXG5rYmQsXG5zYW1wIHtcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlO1xuICAvKiAxICovXG4gIGZvbnQtc2l6ZTogMWVtO1xuICAvKiAyICovXG59XG5cbi8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBmb250IHN0eWxlIGluIEFuZHJvaWQgNC4zLS5cbiAgICAgKi9cbmRmbiB7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYztcbn1cblxuLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGJhY2tncm91bmQgYW5kIGNvbG9yIGluIElFIDktLlxuICAgICAqL1xubWFyayB7XG4gIGJhY2tncm91bmQtY29sb3I6ICNmZjA7XG4gIGNvbG9yOiAjMDAwO1xufVxuXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZm9udCBzaXplIGluIGFsbCBicm93c2Vycy5cbiAgICAgKi9cbnNtYWxsIHtcbiAgZm9udC1zaXplOiA4MCU7XG59XG5cbi8qKlxuICAgICAqIFByZXZlbnQgYHN1YmAgYW5kIGBzdXBgIGVsZW1lbnRzIGZyb20gYWZmZWN0aW5nIHRoZSBsaW5lIGhlaWdodCBpblxuICAgICAqIGFsbCBicm93c2Vycy5cbiAgICAgKi9cbnN1YixcbnN1cCB7XG4gIGZvbnQtc2l6ZTogNzUlO1xuICBsaW5lLWhlaWdodDogMDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTtcbn1cblxuc3VwIHtcbiAgdG9wOiAtMC41ZW07XG59XG5cbi8qIEVtYmVkZGVkIGNvbnRlbnRcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gICAgICovXG5hdWRpbyxcbnZpZGVvIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xufVxuXG4vKipcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBpT1MgNC03LlxuICAgICAqL1xuYXVkaW86bm90KFtjb250cm9sc10pIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgaGVpZ2h0OiAwO1xufVxuXG4vKipcbiAgICAgKiBSZW1vdmUgdGhlIGJvcmRlciBvbiBpbWFnZXMgaW5zaWRlIGxpbmtzIGluIElFIDEwLS5cbiAgICAgKi9cbmltZyB7XG4gIGJvcmRlci1zdHlsZTogbm9uZTtcbn1cblxuLyoqXG4gICAgICogSGlkZSB0aGUgb3ZlcmZsb3cgaW4gSUUuXG4gICAgICovXG5zdmc6bm90KDpyb290KSB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbi8qIEZvcm1zXG4gICAgICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICAgICAqIDEuIENoYW5nZSB0aGUgZm9udCBzdHlsZXMgaW4gYWxsIGJyb3dzZXJzIChvcGluaW9uYXRlZCkuXG4gICAgICogMi4gUmVtb3ZlIHRoZSBtYXJnaW4gaW4gRmlyZWZveCBhbmQgU2FmYXJpLlxuICAgICAqL1xuYnV0dG9uLFxuaW5wdXQsXG5vcHRncm91cCxcbnNlbGVjdCxcbnRleHRhcmVhIHtcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7XG4gIC8qIDEgKi9cbiAgZm9udC1zaXplOiAxMDAlO1xuICAvKiAxICovXG4gIGxpbmUtaGVpZ2h0OiAxLjE1O1xuICAvKiAxICovXG4gIG1hcmdpbjogMDtcbiAgLyogMiAqL1xufVxuXG4vKipcbiAgICAgKiBTaG93IHRoZSBvdmVyZmxvdyBpbiBJRS5cbiAgICAgKi9cbmJ1dHRvbiB7XG4gIG92ZXJmbG93OiB2aXNpYmxlO1xufVxuXG4vKipcbiAgICAgKiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEVkZ2UsIEZpcmVmb3gsIGFuZCBJRS5cbiAgICAgKiAxLiBSZW1vdmUgdGhlIGluaGVyaXRhbmNlIG9mIHRleHQgdHJhbnNmb3JtIGluIEZpcmVmb3guXG4gICAgICovXG5idXR0b24sXG5zZWxlY3Qge1xuICAvKiAxICovXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xufVxuXG4vKipcbiAgICAgKiAxLiBQcmV2ZW50IGEgV2ViS2l0IGJ1ZyB3aGVyZSAoMikgZGVzdHJveXMgbmF0aXZlIGBhdWRpb2AgYW5kIGB2aWRlb2BcbiAgICAgKiAgICBjb250cm9scyBpbiBBbmRyb2lkIDQuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSB0eXBlcyBpbiBpT1MgYW5kIFNhZmFyaS5cbiAgICAgKi9cbmJ1dHRvbixcbmh0bWwgW3R5cGU9XCJidXR0b25cIl0sXG5bdHlwZT1cInJlc2V0XCJdLFxuW3R5cGU9XCJzdWJtaXRcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbiAgLyogMiAqL1xufVxuXG5idXR0b24sXG5bdHlwZT1cImJ1dHRvblwiXSxcblt0eXBlPVwicmVzZXRcIl0sXG5bdHlwZT1cInN1Ym1pdFwiXSB7XG4gIC8qKlxuICAgICAgICogUmVtb3ZlIHRoZSBpbm5lciBib3JkZXIgYW5kIHBhZGRpbmcgaW4gRmlyZWZveC5cbiAgICAgICAqL1xuICAvKipcbiAgICAgICAqIFJlc3RvcmUgdGhlIGZvY3VzIHN0eWxlcyB1bnNldCBieSB0aGUgcHJldmlvdXMgcnVsZS5cbiAgICAgICAqL1xufVxuXG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXG5bdHlwZT1cImJ1dHRvblwiXTo6LW1vei1mb2N1cy1pbm5lcixcblt0eXBlPVwicmVzZXRcIl06Oi1tb3otZm9jdXMtaW5uZXIsXG5bdHlwZT1cInN1Ym1pdFwiXTo6LW1vei1mb2N1cy1pbm5lciB7XG4gIGJvcmRlci1zdHlsZTogbm9uZTtcbiAgcGFkZGluZzogMDtcbn1cblxuYnV0dG9uOi1tb3otZm9jdXNyaW5nLFxuW3R5cGU9XCJidXR0b25cIl06LW1vei1mb2N1c3JpbmcsXG5bdHlwZT1cInJlc2V0XCJdOi1tb3otZm9jdXNyaW5nLFxuW3R5cGU9XCJzdWJtaXRcIl06LW1vei1mb2N1c3Jpbmcge1xuICBvdXRsaW5lOiAxcHggZG90dGVkIEJ1dHRvblRleHQ7XG59XG5cbi8qKlxuICAgICAqIFNob3cgdGhlIG92ZXJmbG93IGluIEVkZ2UuXG4gICAgICovXG5pbnB1dCB7XG4gIG92ZXJmbG93OiB2aXNpYmxlO1xufVxuXG4vKipcbiAgICAgKiAxLiBBZGQgdGhlIGNvcnJlY3QgYm94IHNpemluZyBpbiBJRSAxMC0uXG4gICAgICogMi4gUmVtb3ZlIHRoZSBwYWRkaW5nIGluIElFIDEwLS5cbiAgICAgKi9cblt0eXBlPVwiY2hlY2tib3hcIl0sXG5bdHlwZT1cInJhZGlvXCJdIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgLyogMSAqL1xuICBwYWRkaW5nOiAwO1xuICAvKiAyICovXG59XG5cbi8qKlxuICAgICAqIENvcnJlY3QgdGhlIGN1cnNvciBzdHlsZSBvZiBpbmNyZW1lbnQgYW5kIGRlY3JlbWVudCBidXR0b25zIGluIENocm9tZS5cbiAgICAgKi9cblt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LWlubmVyLXNwaW4tYnV0dG9uLFxuW3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xuICBoZWlnaHQ6IGF1dG87XG59XG5cbi8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIG9kZCBhcHBlYXJhbmNlIGluIENocm9tZSBhbmQgU2FmYXJpLlxuICAgICAqIDIuIENvcnJlY3QgdGhlIG91dGxpbmUgc3R5bGUgaW4gU2FmYXJpLlxuICAgICAqL1xuW3R5cGU9XCJzZWFyY2hcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IHRleHRmaWVsZDtcbiAgLyogMSAqL1xuICBvdXRsaW5lLW9mZnNldDogLTJweDtcbiAgLyogMiAqL1xuICAvKipcbiAgICAgICAqIFJlbW92ZSB0aGUgaW5uZXIgcGFkZGluZyBhbmQgY2FuY2VsIGJ1dHRvbnMgaW4gQ2hyb21lIGFuZCBTYWZhcmkgb24gbWFjT1MuXG4gICAgICAgKi9cbn1cblxuW3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b24sIFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1kZWNvcmF0aW9uIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBub25lO1xufVxuXG4vKipcbiAgICAgKiAxLiBDb3JyZWN0IHRoZSBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIHR5cGVzIGluIGlPUyBhbmQgU2FmYXJpLlxuICAgICAqIDIuIENoYW5nZSBmb250IHByb3BlcnRpZXMgdG8gYGluaGVyaXRgIGluIFNhZmFyaS5cbiAgICAgKi9cbjo6LXdlYmtpdC1maWxlLXVwbG9hZC1idXR0b24ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjtcbiAgLyogMSAqL1xuICBmb250OiBpbmhlcml0O1xuICAvKiAyICovXG59XG5cbi8qKlxuICAgICAqIENoYW5nZSB0aGUgYm9yZGVyLCBtYXJnaW4sIGFuZCBwYWRkaW5nIGluIGFsbCBicm93c2VycyAob3BpbmlvbmF0ZWQpLlxuICAgICAqL1xuZmllbGRzZXQge1xuICBib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xuICBtYXJnaW46IDAgMnB4O1xuICBwYWRkaW5nOiAwLjM1ZW0gMC42MjVlbSAwLjc1ZW07XG59XG5cbi8qKlxuICAgICAqIDEuIENvcnJlY3QgdGhlIHRleHQgd3JhcHBpbmcgaW4gRWRnZSBhbmQgSUUuXG4gICAgICogMi4gQ29ycmVjdCB0aGUgY29sb3IgaW5oZXJpdGFuY2UgZnJvbSBgZmllbGRzZXRgIGVsZW1lbnRzIGluIElFLlxuICAgICAqIDMuIFJlbW92ZSB0aGUgcGFkZGluZyBzbyBkZXZlbG9wZXJzIGFyZSBub3QgY2F1Z2h0IG91dCB3aGVuIHRoZXkgemVybyBvdXRcbiAgICAgKiAgICBgZmllbGRzZXRgIGVsZW1lbnRzIGluIGFsbCBicm93c2Vycy5cbiAgICAgKi9cbmxlZ2VuZCB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC8qIDEgKi9cbiAgZGlzcGxheTogdGFibGU7XG4gIC8qIDEgKi9cbiAgbWF4LXdpZHRoOiAxMDAlO1xuICAvKiAxICovXG4gIHBhZGRpbmc6IDA7XG4gIC8qIDMgKi9cbiAgY29sb3I6IGluaGVyaXQ7XG4gIC8qIDIgKi9cbiAgd2hpdGUtc3BhY2U6IG5vcm1hbDtcbiAgLyogMSAqL1xufVxuXG4vKipcbiAgICAgKiAxLiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBJRSA5LS5cbiAgICAgKiAyLiBBZGQgdGhlIGNvcnJlY3QgdmVydGljYWwgYWxpZ25tZW50IGluIENocm9tZSwgRmlyZWZveCwgYW5kIE9wZXJhLlxuICAgICAqL1xucHJvZ3Jlc3Mge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIC8qIDEgKi9cbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lO1xuICAvKiAyICovXG59XG5cbi8qKlxuICAgICAqIFJlbW92ZSB0aGUgZGVmYXVsdCB2ZXJ0aWNhbCBzY3JvbGxiYXIgaW4gSUUuXG4gICAgICovXG50ZXh0YXJlYSB7XG4gIG92ZXJmbG93OiBhdXRvO1xufVxuXG4vKiBJbnRlcmFjdGl2ZVxuICAgICAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIEVkZ2UsIElFLCBhbmQgRmlyZWZveC5cbiAgICAgKi9cbmRldGFpbHMge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLypcbiAgICAgKiBBZGQgdGhlIGNvcnJlY3QgZGlzcGxheSBpbiBhbGwgYnJvd3NlcnMuXG4gICAgICovXG5zdW1tYXJ5IHtcbiAgZGlzcGxheTogbGlzdC1pdGVtO1xufVxuXG4vKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFIDktLlxuICAgICAqL1xubWVudSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4vKiBTY3JpcHRpbmdcbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgOS0uXG4gICAgICovXG5jYW52YXMge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi8qKlxuICAgICAqIEFkZCB0aGUgY29ycmVjdCBkaXNwbGF5IGluIElFLlxuICAgICAqL1xudGVtcGxhdGUge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4vKiBIaWRkZW5cbiAgICAgICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gICAgICogQWRkIHRoZSBjb3JyZWN0IGRpc3BsYXkgaW4gSUUgMTAtLlxuICAgICAqL1xuW2hpZGRlbl0ge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG5ib2R5IHtcbiAgZm9udC1mYW1pbHk6IEFyaWFsLCBIZWx2ZXRpY2EsIHNhbnMtc2VyaWY7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDIycHg7XG59XG5cbmgxLFxuaDIsXG5oMyxcbmg0LFxuaDUsXG5oNixcbi5hcy1oMSxcbi5hcy1oMixcbi5hcy1oMyxcbi5hcy1oNCxcbi5hcy1oNSxcbi5hcy1oNiB7XG4gIGZvbnQtZmFtaWx5OiBcIkNvdXJpZXIgTmV3XCIsIENvdXJpZXIsIG1vbm9zcGFjZTtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgZm9udC13ZWlnaHQ6IDIwMDtcbiAgbWFyZ2luOiAzMHB4IDA7XG59XG5cbmgxLFxuLmFzLWgxIHtcbiAgZm9udC1zaXplOiA0OHB4O1xuICBsaW5lLWhlaWdodDogNjBweDtcbn1cblxuaDIsXG4uYXMtaDIge1xuICBmb250LXNpemU6IDIwcHg7XG4gIGxpbmUtaGVpZ2h0OiAyOHB4O1xufVxuXG5oMyxcbi5hcy1oMyB7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDIycHg7XG59XG5cbmg0LFxuLmFzLWg0IHtcbiAgZm9udC1zaXplOiAxNnB4O1xuICBsaW5lLWhlaWdodDogMjJweDtcbn1cblxuaDUsXG4uYXMtaDUge1xuICBmb250LXNpemU6IDE2cHg7XG4gIGxpbmUtaGVpZ2h0OiAyMnB4O1xufVxuXG5oNixcbi5hcy1oNiB7XG4gIGZvbnQtc2l6ZTogMTZweDtcbiAgbGluZS1oZWlnaHQ6IDIycHg7XG59XG5cbnAsXG51bCxcbm9sLFxudGFibGUsXG5ibG9ja3F1b3RlLFxuZmlndXJlLFxuaHIsXG5wcmUsXG5jb2RlIHtcbiAgbWFyZ2luOiAyMHB4IDA7XG59XG5cbmFbaHJlZl49J3RlbDonXSB7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xufVxuXG51bCB1bCxcbnVsIG9sLFxub2wgdWwsXG5vbCBvbCB7XG4gIG1hcmdpbi10b3A6IDA7XG4gIG1hcmdpbi1ib3R0b206IDA7XG59XG5cbmhyIHtcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZCBub25lIG5vbmU7XG4gIGJvcmRlci1jb2xvcjogIzFhMWExYTtcbiAgYm9yZGVyLXdpZHRoOiAxcHg7XG59XG5cbjo6c2VsZWN0aW9uIHtcbiAgY29sb3I6IHdoaXRlO1xuICBiYWNrZ3JvdW5kOiAjZmZiNGFjO1xufVxuXG4uYnV0dG9uIHtcbiAgb3V0bGluZTogMDtcbn1cbiIsIi8vIHNhc3MtbGludDpkaXNhYmxlIG5vLWVtcHR5LXJ1bGVzZXRzXHJcbmJvZHkge1xyXG4gIC8vIEBpbmNsdWRlIGh5cGhlbnMoKTtcclxuICBmb250LWZhbWlseTogZ2V0LWZvbnQtZmFtaWx5KCk7XHJcbiAgZm9udC1zaXplOiBnZXQtZm9udC1zaXplKCk7XHJcbiAgbGluZS1oZWlnaHQ6IGdldC1saW5lLWhlaWdodCgpO1xyXG59XHJcblxyXG5oMSxcclxuaDIsXHJcbmgzLFxyXG5oNCxcclxuaDUsXHJcbmg2LFxyXG4uYXMtaDEsXHJcbi5hcy1oMixcclxuLmFzLWgzLFxyXG4uYXMtaDQsXHJcbi5hcy1oNSxcclxuLmFzLWg2IHtcclxuICBmb250LWZhbWlseTogZ2V0LWZvbnQtZmFtaWx5KCdtb25vJyk7XHJcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuICBmb250LXdlaWdodDogMjAwO1xyXG4gIG1hcmdpbjogMzBweCAwO1xyXG59XHJcblxyXG5oMSxcclxuLmFzLWgxIHtcclxuICBmb250LXNpemU6IGdldC1mb250LXNpemUoJ2gxJyk7XHJcbiAgbGluZS1oZWlnaHQ6IGdldC1saW5lLWhlaWdodCgnaDEnKTtcclxufVxyXG5cclxuaDIsXHJcbi5hcy1oMiB7XHJcbiAgZm9udC1zaXplOiBnZXQtZm9udC1zaXplKCdoMicpO1xyXG4gIGxpbmUtaGVpZ2h0OiBnZXQtbGluZS1oZWlnaHQoJ2gyJyk7XHJcbn1cclxuXHJcbmgzLFxyXG4uYXMtaDMge1xyXG4gIGZvbnQtc2l6ZTogZ2V0LWZvbnQtc2l6ZSgnaDMnKTtcclxuICBsaW5lLWhlaWdodDogZ2V0LWxpbmUtaGVpZ2h0KCdoMycpO1xyXG59XHJcblxyXG5oNCxcclxuLmFzLWg0IHtcclxuICBmb250LXNpemU6IGdldC1mb250LXNpemUoJ2g0Jyk7XHJcbiAgbGluZS1oZWlnaHQ6IGdldC1saW5lLWhlaWdodCgnaDQnKTtcclxufVxyXG5cclxuaDUsXHJcbi5hcy1oNSB7XHJcbiAgZm9udC1zaXplOiBnZXQtZm9udC1zaXplKCdoNScpO1xyXG4gIGxpbmUtaGVpZ2h0OiBnZXQtbGluZS1oZWlnaHQoJ2g1Jyk7XHJcbn1cclxuXHJcbmg2LFxyXG4uYXMtaDYge1xyXG4gIGZvbnQtc2l6ZTogZ2V0LWZvbnQtc2l6ZSgnaDYnKTtcclxuICBsaW5lLWhlaWdodDogZ2V0LWxpbmUtaGVpZ2h0KCdoNicpO1xyXG59XHJcblxyXG5wLFxyXG51bCxcclxub2wsXHJcbnRhYmxlLFxyXG5ibG9ja3F1b3RlLFxyXG5maWd1cmUsXHJcbmhyLFxyXG5wcmUsXHJcbmNvZGUge1xyXG4gIG1hcmdpbjogMjBweCAwO1xyXG59XHJcblxyXG5hIHtcclxuICAmW2hyZWZePSd0ZWw6J10ge1xyXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgfVxyXG5cclxuICAmW2hyZWZePSdtYWlsdG86J10ge1xyXG5cclxuICB9XHJcblxyXG4gICZbdGFyZ2V0PSdfYmxhbmsnXSB7XHJcblxyXG4gIH1cclxuXHJcbiAgJjpob3ZlciB7XHJcblxyXG4gIH1cclxuXHJcbiAgJjphY3RpdmUge1xyXG5cclxuICB9XHJcbn1cclxuXHJcbnVsLFxyXG5vbCB7XHJcbiAgdWwsXHJcbiAgb2wge1xyXG4gICAgbWFyZ2luLXRvcDogMDtcclxuICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgfVxyXG59XHJcblxyXG5saSB7XHJcblxyXG59XHJcblxyXG5ociB7XHJcbiAgYm9yZGVyLXN0eWxlOiBzb2xpZCBub25lIG5vbmU7XHJcbiAgYm9yZGVyLWNvbG9yOiBjKCdibGFjaycsIHRpbnQgMTAlKTtcclxuICBib3JkZXItd2lkdGg6IDFweDtcclxuXHJcbiAgJjo6YmVmb3JlIHtcclxuXHJcbiAgfVxyXG5cclxuICAmOjphZnRlciB7XHJcblxyXG4gIH1cclxufVxyXG5cclxuYmxvY2txdW90ZSB7XHJcblxyXG59XHJcblxyXG5maWd1cmUge1xyXG5cclxufVxyXG5cclxucCB7XHJcblxyXG59XHJcblxyXG5zbWFsbCB7XHJcblxyXG59XHJcblxyXG5pbWcge1xyXG5cclxufVxyXG5cclxuYixcclxuc3Ryb25nIHtcclxuXHJcbn1cclxuXHJcbmksXHJcbmVtIHtcclxuXHJcbn1cclxuXHJcbnByZSxcclxuY29kZSB7XHJcblxyXG59XHJcblxyXG46OnNlbGVjdGlvbiB7XHJcbiAgY29sb3I6IGMoJ3doaXRlJyk7XHJcbiAgYmFja2dyb3VuZDogYygncHJpbWFyeS1saWdodGVyJyk7XHJcbn1cclxuIiwiLy8vIEdldHMgYSBjb2xvciBvdXQgb2YgJGNvbG9yLW1hcCBhbmQgY2FuIGFwcGx5IHNldmVyYWwgY29sb3IgbWFuaXB1bGF0aW9ucy5cclxuLy8vIEBwYXJhbSAge0NvbG9yfSAgICRrZXlcclxuLy8vIEBwYXJhbSAge0FyZ0xpc3R9ICRjYWxsYmFja3MuLi5cclxuLy8vIEByZXR1cm4ge0NvbG9yfVxyXG5AZnVuY3Rpb24gZ2V0LWNvbG9yKCRrZXksICRjYWxsYmFja3MuLi4pIHtcclxuICAkY29sb3I6IG51bGw7XHJcbiAgJGNhbGxiYWNrLWZ1bmN0aW9uOiBudWxsO1xyXG4gICRjYWxsYmFja3MtbGVuZ3RoOiBsZW5ndGgoJGNhbGxiYWNrcyk7XHJcblxyXG4gIC8vIGlmICRrZXkgaXMgYSBjb2xvciBieSBpdHNlbGYgYW5kIG5vdCBpbiAkY29sb3ItbWFwIHJldHVybiAka2V5XHJcbiAgLy8gb3RoZXJ3aXNlIGdldCB0aGUgY29sb3IgZnJvbSAkY29sb3ItbWFwXHJcbiAgQGlmIHR5cGUtb2YoJGtleSkgPT0gY29sb3IgYW5kIG5vdChtYXAtaGFzLWtleSgkY29sb3ItbWFwLCAka2V5KSkge1xyXG4gICAgJGNvbG9yOiAka2V5O1xyXG4gIH1cclxuXHJcbiAgQGVsc2Uge1xyXG4gICAgJGNvbG9yOiBtYXAtZ2V0KCRjb2xvci1tYXAsICRrZXkpO1xyXG4gIH1cclxuXHJcbiAgLy8gdGhyb3cgYSB3YXJuaW5nIGlmICRrZXkgaXMgbmVpdGhlciBhIHZhbGlkIGNvbG9yXHJcbiAgLy8gbm9yIGluIHRoZSBjb2xvciBtYXAgYW5kIHN0b3AgcHJwYWdhdGlvblxyXG4gIEBpZiB0eXBlLW9mKCRjb2xvcikgPT0gJ251bGwnIHtcclxuICAgIEB3YXJuICcjeyRrZXl9IGlzIG5laXRoZXIgYSB2YWxpZCBjb2xvciBub3IgaW4gdGhlIGNvbG9yIG1hcC4nO1xyXG4gIH1cclxuXHJcbiAgLy8gY2hlY2sgaWYgYW55IGNhbGxiYWNrcyBhcmUgc2V0XHJcbiAgQGVsc2Uge1xyXG4gICAgQGlmICRjYWxsYmFja3MtbGVuZ3RoID4gMCB7XHJcblxyXG4gICAgICAvLyBsb29wIHRocm91Z2ggY2FsbGJhY2tzXHJcbiAgICAgIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggJGNhbGxiYWNrcy1sZW5ndGgge1xyXG4gICAgICAgICRjYWxsYmFjazogbnRoKCRjYWxsYmFja3MsICRpKTtcclxuICAgICAgICAkY2FsbGJhY2stYXJnczogKCRjb2xvcik7XHJcbiAgICAgICAgJGNhbGxiYWNrLWxlbmd0aDogbGVuZ3RoKCRjYWxsYmFjayk7XHJcblxyXG4gICAgICAgIC8vIGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgbW9yZSBhcmdzIGZvciB0aGUgY2FsbGJhY2tcclxuICAgICAgICBAaWYgJGNhbGxiYWNrLWxlbmd0aCA+IDEge1xyXG4gICAgICAgICAgJGNhbGxiYWNrLWZ1bmN0aW9uOiBudGgoJGNhbGxiYWNrLCAxKTtcclxuXHJcbiAgICAgICAgICAvLyBhcHBlbmQgYXJncyB0byB0aGUgY2FsbGJhY2sgbGlzdFxyXG4gICAgICAgICAgQGZvciAkbiBmcm9tIDIgdGhyb3VnaCAkY2FsbGJhY2stbGVuZ3RoIHtcclxuICAgICAgICAgICAgJGNhbGxiYWNrLWFyZ3M6IGFwcGVuZCgkY2FsbGJhY2stYXJncywgbnRoKCRjYWxsYmFjaywgJG4pKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGlmICRjYWxsYmFjay1sZW5ndGggaXMgMSB0aGVuIHRoZXJlIGlzXHJcbiAgICAgICAgLy8gb25seSBhIGZ1bmN0aW9uIHdpdGhvdXQgYW55IG1vcmUgYXJnc1xyXG4gICAgICAgIEBlbHNlIHtcclxuICAgICAgICAgICRjYWxsYmFjay1mdW5jdGlvbjogJGNhbGxiYWNrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gY2FsbCBmdW5jdGlvblxyXG4gICAgICAgICRjb2xvcjogY2FsbCgkY2FsbGJhY2stZnVuY3Rpb24sICRjYWxsYmFjay1hcmdzLi4uKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gcmV0dXJuIHRoZSBjb2xvclxyXG4gIEByZXR1cm4gJGNvbG9yO1xyXG59XHJcblxyXG4vLy8gU2hvcnRoYW5kIGZvciBnZXQtY29sb3IoKVxyXG5AZnVuY3Rpb24gYygka2V5LCAkY2FsbGJhY2tzLi4uKSB7XHJcbiAgQHJldHVybiBnZXQtY29sb3IoJGtleSwgJGNhbGxiYWNrcy4uLik7XHJcbn1cclxuXHJcblxyXG5cclxuLy8vIEB0b2RvIGRlc2NyaXB0aW9uXHJcbkBmdW5jdGlvbiB0aW50KCRjb2xvciwgJGFtb3VudCkge1xyXG4gIEByZXR1cm4gbWl4KHdoaXRlLCAkY29sb3IsICRhbW91bnQpO1xyXG59XHJcblxyXG4vLy8gQHRvZG8gZGVzY3JpcHRpb25cclxuQGZ1bmN0aW9uIHNoYWRlKCRjb2xvciwgJGFtb3VudCkge1xyXG4gIEByZXR1cm4gbWl4KGJsYWNrLCAkY29sb3IsICRhbW91bnQpO1xyXG59XHJcblxyXG4vLy8gQHRvZG8gZGVzY3JpcHRpb25cclxuQGZ1bmN0aW9uIG9wYWNpdHkoJGNvbG9yLCAkYW1vdW50KSB7XHJcbiAgQHJldHVybiB0cmFuc3BhcmVudGl6ZSgkY29sb3IsICgxIC0gJGFtb3VudCkpO1xyXG59XHJcblxyXG5cclxuXHJcbi8vLyBAdG9kbyBkZXNjcmlwdGlvblxyXG5AZnVuY3Rpb24gZ2V0LW9wdGlvbigka2V5LCAkbXVsdGlwbGllcjogMSkge1xyXG4gICR2YWx1ZTogbWFwLWdldCgkb3B0aW9ucy1tYXAsICRrZXkpO1xyXG5cclxuICBAaWYgdHlwZS1vZigkdmFsdWUpID09ICdudW1iZXInIHtcclxuICAgIEByZXR1cm4gJHZhbHVlICogJG11bHRpcGxpZXI7XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuICR2YWx1ZTtcclxufVxyXG5cclxuLy8vIFNob3J0aGFuZCBmb3IgZ2V0LW9wdGlvbigpXHJcbkBmdW5jdGlvbiBvKCRrZXksICRtdWx0aXBsaWVyOiAxKSB7XHJcbiAgQHJldHVybiBnZXQtb3B0aW9uKCRrZXksICRtdWx0aXBsaWVyKTtcclxufVxyXG5cclxuXHJcblxyXG4vLy8gQHRvZG8gZGVzY3JpcHRpb25cclxuQGZ1bmN0aW9uIGdldC1icmVha3BvaW50KCRrZXksICRtdWx0aXBsaWVyOiAxKSB7XHJcbiAgJGJyZWFrcG9pbnRzOiBnZXQtb3B0aW9uKCdicmVha3BvaW50cycpO1xyXG5cclxuICBAcmV0dXJuIG1hcC1nZXQoJGJyZWFrcG9pbnRzLCAka2V5KSAqICRtdWx0aXBsaWVyO1xyXG59XHJcblxyXG4vLy8gU2hvcnRoYW5kIGZvciBnZXQtYnJlYWtwb2ludCgpXHJcbkBmdW5jdGlvbiBiKCRrZXksICRtdWx0aXBsaWVyOiAxKSB7XHJcbiAgQHJldHVybiBnZXQtYnJlYWtwb2ludCgka2V5LCAkbXVsdGlwbGllcik7XHJcbn1cclxuXHJcblxyXG5cclxuLy8vIEB0b2RvIGRlc2NyaXB0aW9uXHJcbkBmdW5jdGlvbiBnZXQtc3BhY2luZygka2V5LCAkbXVsdGlwbGllcjogMSkge1xyXG4gICRzcGFjaW5nczogZ2V0LW9wdGlvbignc3BhY2luZ3MnKTtcclxuXHJcbiAgQHJldHVybiBtYXAtZ2V0KCRzcGFjaW5ncywgJGtleSkgKiAkbXVsdGlwbGllcjtcclxufVxyXG5cclxuLy8vIFNob3J0aGFuZCBmb3IgZ2V0LXNwYWNpbmcoKVxyXG5AZnVuY3Rpb24gcygka2V5LCAkbXVsdGlwbGllcjogMSkge1xyXG4gIEByZXR1cm4gZ2V0LXNwYWNpbmcoJGtleSwgJG11bHRpcGxpZXIpO1xyXG59XHJcblxyXG5cclxuXHJcbi8vLyBAdG9kbyBkZXNjcmlwdGlvblxyXG5AZnVuY3Rpb24gZ2V0LWZvbnQtZmFtaWx5KCRrZXk6ICdkZWZhdWx0Jykge1xyXG4gICRmb250LWZhbWlsaWVzOiBnZXQtb3B0aW9uKCdmb250LWZhbWlsaWVzJyk7XHJcbiAgJGZvbnQtZmFtaWx5OiBtYXAtZ2V0KCRmb250LWZhbWlsaWVzLCAka2V5KTtcclxuXHJcbiAgQGlmIHR5cGUtb2YoJGZvbnQtZmFtaWx5KSA9PSAnbnVsbCcge1xyXG4gICAgQGVycm9yICcjeyRrZXl9IGlzIG5laXRoZXIgYSB2YWxpZCBmb250LWZhbWlseSBub3Igc3BlY2lmaWVkIGluIHRoZSBvcHRpb25zLic7XHJcbiAgfVxyXG5cclxuICBAcmV0dXJuIHVucXVvdGUoJGZvbnQtZmFtaWx5KTtcclxufVxyXG5cclxuLy8vIFNob3J0aGFuZCBmb3IgZ2V0LWZvbnQoKVxyXG5AZnVuY3Rpb24gZmYoJGtleTogJ2RlZmF1bHQnKSB7XHJcbiAgQHJldHVybiBnZXQtZm9udC1mYW1pbHkoJGtleSk7XHJcbn1cclxuXHJcblxyXG5cclxuLy8vIEB0b2RvIGRlc2NyaXB0aW9uXHJcbkBmdW5jdGlvbiBnZXQtZm9udC1zaXplKCRrZXk6ICdkZWZhdWx0JywgJG11bHRpcGxpZXI6IDEpIHtcclxuICBAaWYgdHlwZS1vZigka2V5KSA9PSAnbnVtYmVyJyB7XHJcbiAgICBAcmV0dXJuICRrZXkgKiAkbXVsdGlwbGllcjtcclxuICB9XHJcblxyXG4gICRmb250LXNpemVzOiBnZXQtb3B0aW9uKCdmb250LXNpemVzJyk7XHJcbiAgJGZvbnQtc2l6ZTogbWFwLWdldCgkZm9udC1zaXplcywgJGtleSk7XHJcbiAgJGZvbnQtc2l6ZTogbnRoKCRmb250LXNpemUsIDEpO1xyXG5cclxuICBAaWYgdHlwZS1vZigkZm9udC1zaXplKSA9PSAnbnVsbCcge1xyXG4gICAgQGVycm9yICcjeyRrZXl9IGlzIG5laXRoZXIgYSB2YWxpZCBmb250LXNpemUgbm9yIHNwZWNpZmllZCBpbiB0aGUgb3B0aW9ucy4nO1xyXG4gIH1cclxuXHJcbiAgQHJldHVybiAkZm9udC1zaXplICogJG11bHRpcGxpZXI7XHJcbn1cclxuXHJcbi8vLyBTaG9ydGhhbmQgZm9yIGdldC1mb250KClcclxuQGZ1bmN0aW9uIGZzKCRrZXk6ICdkZWZhdWx0JywgJG11bHRpcGxpZXI6IDEpIHtcclxuICBAcmV0dXJuIGdldC1mb250LXNpemUoJGtleSwgJG11bHRpcGxpZXIpO1xyXG59XHJcblxyXG5cclxuXHJcbi8vLyBAdG9kbyBkZXNjcmlwdGlvblxyXG5AZnVuY3Rpb24gZ2V0LWxpbmUtaGVpZ2h0KCRrZXk6ICdkZWZhdWx0JywgJG11bHRpcGxpZXI6IDEpIHtcclxuXHJcbiAgQGlmIHR5cGUtb2YoJGtleSkgPT0gJ251bWJlcicge1xyXG4gICAgQHJldHVybiAka2V5ICogJG11bHRpcGxpZXI7XHJcbiAgfVxyXG5cclxuICAkZm9udC1zaXplczogZ2V0LW9wdGlvbignZm9udC1zaXplcycpO1xyXG4gICRmb250LXNpemU6IG1hcC1nZXQoJGZvbnQtc2l6ZXMsICRrZXkpO1xyXG5cclxuICBAcmV0dXJuIG50aCgkZm9udC1zaXplLCAyKSAqICRtdWx0aXBsaWVyO1xyXG59XHJcblxyXG4vLy8gU2hvcnRoYW5kIGZvciBnZXQtZm9udCgpXHJcbkBmdW5jdGlvbiBsaCgka2V5OiAnZGVmYXVsdCcsICRtdWx0aXBsaWVyOiAxKSB7XHJcbiAgQHJldHVybiBnZXQtbGluZS1oZWlnaHQoJGtleSwgJG11bHRpcGxpZXIpO1xyXG59XHJcblxyXG5cclxuXHJcbi8vLyBAdG9kbyBkZXNjcmlwdGlvblxyXG5AZnVuY3Rpb24gcmVtKCRzaXplKSB7XHJcbiAgJHVuaXQ6IHVuaXQoJHNpemUpO1xyXG5cclxuICBAaWYgJHVuaXQgPT0gJ3B4JyB7XHJcbiAgICBAcmV0dXJuICRzaXplIC8gMTZweCAqIDFyZW07XHJcbiAgfVxyXG5cclxuICBAZWxzZSBpZiAkdW5pdCA9PSAnJyB7XHJcbiAgICBAcmV0dXJuICRzaXplIC8gMTYgKiAxcmVtO1xyXG4gIH1cclxuXHJcbiAgQHJldHVybiAkc2l6ZTtcclxufVxyXG5cclxuXHJcbi8vLyBSZXR1cm5zICRsaXN0IGFzIGEgc3RyaW5nLCBwcmV0dGlmaWVkIGlmICRwcmUgaXMgc2V0IHRvIHRydWUuXHJcbi8vLyBAcGFyYW0gIHtMaXN0fSAgICRsaXN0XHJcbi8vLyBAcGFyYW0gIHtCb29sfSAgICRwcmVcclxuLy8vIEBwYXJhbSAge051bWJlcn0gJGxldmVsICgxKVxyXG4vLy8gQHJldHVybiB7U3RyaW5nfVxyXG5AZnVuY3Rpb24gZGVidWcoJGxpc3QsICRwcmU6IGZhbHNlLCAkbGV2ZWw6IDEpIHtcclxuICAvLyBzY3NzLWxpbnQ6ZGlzYWJsZSBTcGFjZUJldHdlZW5QYXJlbnNcclxuICBAaWYgaXMtZW1wdHkoJGxpc3QpIHtcclxuICAgIEByZXR1cm4gJyggKSc7XHJcbiAgfVxyXG5cclxuICBAaWYgaXMtc2luZ2xlKCRsaXN0KSB7XHJcbiAgICBAcmV0dXJuIGlmKCRwcmUsICcoJyArIHR5cGUtb2YoJGxpc3QpICsgJykgJywgJycpICsgJGxpc3Q7XHJcbiAgfVxyXG5cclxuICAkdGFiOiAnICAgICc7XHJcbiAgJGluZGVudDogJyc7XHJcbiAgJGJyZWFrOiBpZigkcHJlLCAnXFxBICcsICcnKTtcclxuICAkbGVuZ3RoOiBsZW5ndGgoJGxpc3QpO1xyXG5cclxuICBAZm9yICRpIGZyb20gMSB0byAkbGV2ZWwge1xyXG4gICAgJGluZGVudDogJGluZGVudCArICR0YWI7XHJcbiAgfVxyXG5cclxuICAkcmVzdWx0OiAnWycgKyAkYnJlYWs7XHJcblxyXG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggJGxlbmd0aCB7XHJcbiAgICAkaXRlbTogbnRoKCRsaXN0LCAkaSk7XHJcbiAgICAkcmVzdWx0OiAkcmVzdWx0ICsgaWYoJHByZSwgJGluZGVudCArICR0YWIsICcgJyk7XHJcblxyXG4gICAgQGlmIGhhcy1tdWx0aXBsZS12YWx1ZXMoJGl0ZW0pIHtcclxuICAgICAgJHJlc3VsdDogJHJlc3VsdCArIGlmKCRwcmUsICcobGlzdDogJyArIGxlbmd0aCgkaXRlbSkgKyAnKSAnLCAnJykgKyBkZWJ1ZygkaXRlbSwgJHByZSwgJGxldmVsICsgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgQGVsc2Uge1xyXG4gICAgICBAaWYgJHByZSB7XHJcbiAgICAgICAgJHJlc3VsdDogJHJlc3VsdCArICcoJyArIHR5cGUtb2YoJGl0ZW0pICsgJykgJztcclxuICAgICAgfVxyXG5cclxuICAgICAgQGlmIGlzLWVtcHR5KCRpdGVtKSB7XHJcbiAgICAgICAgJHJlc3VsdDogJHJlc3VsdCArICcoICknO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBAZWxzZSBpZiB0eXBlLW9mKCRpdGVtKSA9PSAnc3RyaW5nJyB7XHJcbiAgICAgICAgJHJlc3VsdDogJHJlc3VsdCArIHF1b3RlKCRpdGVtKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgQGVsc2UgaWYgJGl0ZW0gPT0gbnVsbCB7XHJcbiAgICAgICAgJHJlc3VsdDogJHJlc3VsdCArICdudWxsJztcclxuICAgICAgfVxyXG5cclxuICAgICAgQGVsc2Uge1xyXG4gICAgICAgICRyZXN1bHQ6ICRyZXN1bHQgKyAkaXRlbTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIEBpZiAkaSAhPSAkbGVuZ3RoIHtcclxuICAgICAgJHJlc3VsdDogJHJlc3VsdCArICcsJyArICRicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gICRyZXN1bHQ6ICRyZXN1bHQgKyAkYnJlYWsgKyBpZigkcHJlLCBpZigkbGV2ZWwgPiAxLCAkaW5kZW50LCAnJyksICcgJykgKyAnXSc7XHJcblxyXG4gIEByZXR1cm4gcXVvdGUoJHJlc3VsdCk7XHJcbiAgLy8gc2Nzcy1saW50OmVuYWJsZSBTcGFjZUJldHdlZW5QYXJlbnNcclxufVxyXG5cclxuXHJcbi8vLyBUZXN0cyB3aGV0aGVyICRsaXN0IGlzIGVtcHR5LlxyXG4vLy8gQHBhcmFtICB7TGlzdH0gJGxpc3RcclxuLy8vIEByZXR1cm4ge0Jvb2x9XHJcbkBmdW5jdGlvbiBpcy1lbXB0eSgkbGlzdCkge1xyXG4gIEByZXR1cm4gbGVuZ3RoKCRsaXN0KSA9PSAwO1xyXG59XHJcblxyXG5cclxuLy8vIFRlc3RzIHdoZXRoZXIgJGxpc3QgaGFzIGEgc2luZ2xlIGl0ZW0uXHJcbi8vLyBAcGFyYW0gIHtMaXN0fSAkbGlzdFxyXG4vLy8gQHJldHVybiB7Qm9vbH1cclxuQGZ1bmN0aW9uIGlzLXNpbmdsZSgkbGlzdCkge1xyXG4gIEByZXR1cm4gbGVuZ3RoKCRsaXN0KSA9PSAxO1xyXG59XHJcblxyXG5cclxuLy8vIFRlc3RzIHdoZXRoZXIgJGxpc3QgaGFzIGF0IGxlYXN0IDIgdmFsdWVzLlxyXG4vLy8gQG9hcmFtICB7TGlzdH0gJGxpc3RcclxuLy8vIEByZXR1cm4ge0Jvb2x9XHJcbkBmdW5jdGlvbiBoYXMtbXVsdGlwbGUtdmFsdWVzKCRsaXN0KSB7XHJcbiAgQHJldHVybiBsZW5ndGgoJGxpc3QpID4gMTtcclxufVxyXG4iLCJAaW5jbHVkZSBjb2xvci1hZGQoJ3ByaW1hcnknLCAjZmY2ODU4KTtcclxuQGluY2x1ZGUgY29sb3ItYWRkLWdyYWRpZW50cygncHJpbWFyeScpO1xyXG5cclxuQGluY2x1ZGUgY29sb3ItYWRkKCdzZWNvbmRhcnknLCAjNDQ0KTtcclxuQGluY2x1ZGUgY29sb3ItYWRkLWdyYWRpZW50cygnc2Vjb25kYXJ5Jyk7XHJcblxyXG5AaW5jbHVkZSBjb2xvci1hZGQoJ3doaXRlJywgd2hpdGUpO1xyXG5AaW5jbHVkZSBjb2xvci1hZGQoJ2JsYWNrJywgYmxhY2spO1xyXG5cclxuQGluY2x1ZGUgY29sb3ItYWRkKCdncmF5JywgZ3JheSk7XHJcbkBpbmNsdWRlIGNvbG9yLWFkZC1ncmFkaWVudHMoJ2dyYXknKTtcclxuXHJcbi8vIEBpbmNsdWRlIGRlYnVnKCRjb2xvci1tYXApO1xyXG4iLCIvLy8gQWRkIGh5cGhlbmF0aW9uLlxyXG4vLy8gYnJvd3NlciBzdXBwb3J0IGh0dHA6Ly9jYW5pdXNlLmNvbS8jc2VhcmNoPWh5cGhlbnNcclxuQG1peGluIGh5cGhlbnMoKSB7XHJcbiAgb3ZlcmZsb3ctd3JhcDogYnJlYWstd29yZDtcclxuICB3b3JkLXdyYXA6IGJyZWFrLXdvcmQ7XHJcbiAgaHlwaGVuczogYXV0bztcclxufVxyXG5cclxuXHJcbi8vLyBBZGQgYSBjb2xvci5cclxuQG1peGluIGNvbG9yLWFkZCgka2V5LCAkdmFsdWUpIHtcclxuXHJcbiAgQGlmIG5vdChnbG9iYWwtdmFyaWFibGUtZXhpc3RzKCdjb2xvci1tYXAnKSkge1xyXG5cclxuICAgIC8vLyBHbG9iYWwgdmFyaWFibGUgdG8ga2VlcCB0cmFja1xyXG4gICAgLy8vIG9mIGFsbCBmaWx0ZXJzXHJcbiAgICAvLy8gQHR5cGUge01hcH1cclxuICAgIC8vLyBAZXhhbXBsZSAkY29sb3ItbWFwOiAoXHJcbiAgICAvLy8gICBrZXk6IHZhbHVlXHJcbiAgICAvLy8gKVxyXG4gICAgJGNvbG9yLW1hcDogKCkgIWdsb2JhbDtcclxuICB9XHJcblxyXG4gIEBpZiB0eXBlLW9mKCR2YWx1ZSkgIT0gJ2NvbG9yJyB7XHJcbiAgICBAd2FybiAnI3skdmFsdWV9IGlzIG5vdCBhIHZhbGlkIGNvbG9yLic7XHJcbiAgfVxyXG5cclxuICAkY29sb3ItbWFwOiBtYXAtbWVyZ2UoJGNvbG9yLW1hcCwgKCRrZXk6ICR2YWx1ZSkpICFnbG9iYWw7XHJcbn1cclxuXHJcblxyXG4vLy8gQWRkIGNvbG9yIGdyYWRpZW50cy5cclxuLy8vIEBwYXJhbSB7U3RyaW5nfSAka2V5XHJcbkBtaXhpbiBjb2xvci1hZGQtZ3JhZGllbnRzKCRrZXkpIHtcclxuXHJcbiAgQGlmIG5vdChnbG9iYWwtdmFyaWFibGUtZXhpc3RzKCdjb2xvci1tYXAnKSkge1xyXG5cclxuICAgIC8vLyBHbG9iYWwgdmFyaWFibGUgdG8ga2VlcCB0cmFja1xyXG4gICAgLy8vIG9mIGFsbCBmaWx0ZXJzXHJcbiAgICAvLy8gQHR5cGUge01hcH1cclxuICAgIC8vLyBAZXhhbXBsZSAkY29sb3ItbWFwOiAoXHJcbiAgICAvLy8gICBrZXk6IHZhbHVlXHJcbiAgICAvLy8gKVxyXG4gICAgJGNvbG9yLW1hcDogKCkgIWdsb2JhbDtcclxuICB9XHJcblxyXG4gICRjb2xvcjogZ2V0LWNvbG9yKCRrZXkpO1xyXG4gICR3aGl0ZTogI2ZmZjtcclxuICAkYmxhY2s6ICMwMDA7XHJcblxyXG4gIEBpZiB0eXBlLW9mKCRjb2xvcikgIT0gJ2NvbG9yJyB7XHJcbiAgICBAd2FybiAnI3ska2V5fSBpcyBuZWl0aGVyIGEgdmFsaWQgY29sb3Igbm9yIGluIHRoZSBjb2xvciBtYXAuJztcclxuICB9XHJcblxyXG4gIC8vIHN1ZmZpeGVzIGZvciBsaWdodCBncmFkaWVudHNcclxuICAkZ3JhZGllbnRzOiAoXHJcbiAgICAnbGlnaHQnLFxyXG4gICAgJ2xpZ2h0ZXInLFxyXG4gICAgJ2xpZ2h0ZXN0JyxcclxuICApO1xyXG5cclxuICAkbGVuZ3RoOiBsZW5ndGgoJGdyYWRpZW50cyk7XHJcblxyXG4gIC8vIGxvb3AgdGhyb3VnaCB0aGUgZ3JhZGllbnRzXHJcbiAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCAkbGVuZ3RoIHtcclxuICAgICRjb2xvci1ncmFkaWVudDogbWl4KCR3aGl0ZSwgJGNvbG9yLCBwZXJjZW50YWdlKCRpIC8gKCRsZW5ndGggKyAxKSkpO1xyXG4gICAgJGNvbG9yLW1hcDogbWFwLW1lcmdlKCRjb2xvci1tYXAsICgjeyRrZXkgKyAnLScgKyBudGgoJGdyYWRpZW50cywgJGkpfTogJGNvbG9yLWdyYWRpZW50KSkgIWdsb2JhbDtcclxuICB9XHJcblxyXG4gIC8vIHN1ZmZpeGVzIGZvciBsaWdodCBncmFkaWVudHNcclxuICAkZ3JhZGllbnRzOiAoXHJcbiAgICAnZGFyaycsXHJcbiAgICAnZGFya2VyJyxcclxuICAgICdkYXJrZXN0JyxcclxuICApO1xyXG5cclxuICAkbGVuZ3RoOiBsZW5ndGgoJGdyYWRpZW50cyk7XHJcblxyXG4gIEBmb3IgJGkgZnJvbSAxIHRocm91Z2ggJGxlbmd0aCB7XHJcbiAgICAkY29sb3ItZ3JhZGllbnQ6IG1peCgkYmxhY2ssICRjb2xvciwgcGVyY2VudGFnZSgkaSAvICgkbGVuZ3RoICsgMSkpKTtcclxuICAgICRjb2xvci1tYXA6IG1hcC1tZXJnZSgkY29sb3ItbWFwLCAoI3ska2V5ICsgJy0nICsgbnRoKCRncmFkaWVudHMsICRpKX06ICRjb2xvci1ncmFkaWVudCkpICFnbG9iYWw7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuLy8vIFByaW50IGFsbCBmcmFtZXNcclxuLy8vIEBwYXJhbSB7c3RyaW5nfSAkYW5pbWF0aW9uLW5hbWVcclxuLy8vIEBwYXJhbSB7Ym9vbH0gICAkcmVsYXRpdmVcclxuQG1peGluIGtleWZyYW1lcygkYW5pbWF0aW9uLW5hbWUsICRyZWxhdGl2ZTogdHJ1ZSkge1xyXG5cclxuICBAY29udGVudDtcclxuXHJcbiAgLy8gJ3Byb3BlcnR5JzogbGlzdC1zZXBlcmF0b3IsIGNvbW1hIHwgc3BhY2VcclxuICAkc3RhY2thYmxlLXByb3BlcnRpZXM6IChcclxuICAgICd0cmFuc2Zvcm0nOiBzcGFjZSxcclxuICApO1xyXG5cclxuICAkZnJhbWUtcHJvcGVydGllczogKCk7XHJcblxyXG4gIEBpZiAkcmVsYXRpdmUgYW5kIG5vdChtYXAtaGFzLWtleSgka2V5ZnJhbWVzLCAnMTAwJScpKSB7XHJcbiAgICBAaW5jbHVkZSBmcmFtZSgxMDAlKTtcclxuICB9XHJcblxyXG4gIEBrZXlmcmFtZXMgI3skYW5pbWF0aW9uLW5hbWV9IHtcclxuICAgIEB3aGlsZSBsZW5ndGgoJGtleWZyYW1lcykgPiAwIHtcclxuXHJcbiAgICAgICRmcmFtZXM6IG1hcC1rZXlzKCRrZXlmcmFtZXMpO1xyXG4gICAgICAkZnJhbWU6IG1pbigkZnJhbWVzLi4uKTtcclxuXHJcbiAgICAgICRmcmFtZS1kYXRhOiBtYXAtZ2V0KCRrZXlmcmFtZXMsICRmcmFtZSk7XHJcbiAgICAgICRrZXlmcmFtZXM6IG1hcC1yZW1vdmUoJGtleWZyYW1lcywgJGZyYW1lKTtcclxuXHJcbiAgICAgICN7JGZyYW1lfSB7XHJcblxyXG4gICAgICAgIEBpZiBub3QoJHJlbGF0aXZlKSB7XHJcbiAgICAgICAgICAkZnJhbWUtcHJvcGVydGllczogKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkbGVuZ3RoOiBsZW5ndGgoJGZyYW1lLWRhdGEpO1xyXG5cclxuICAgICAgICBAZm9yICRpIGZyb20gMSB0aHJvdWdoICRsZW5ndGgge1xyXG4gICAgICAgICAgJGRhdGE6IG50aChudGgoJGZyYW1lLWRhdGEsICRpKSwgMik7XHJcbiAgICAgICAgICAkcHJvcGVydGllczogbWFwLWdldCgkZGF0YSwgJ3Byb3BlcnRpZXMnKTtcclxuXHJcbiAgICAgICAgICBAZWFjaCAkcHJvcGVydHksICR2YWx1ZSBpbiAkcHJvcGVydGllcyB7XHJcbiAgICAgICAgICAgIEBpZiBtYXAtaGFzLWtleSgkc3RhY2thYmxlLXByb3BlcnRpZXMsICRwcm9wZXJ0eSkgYW5kIG1hcC1oYXMta2V5KCRmcmFtZS1wcm9wZXJ0aWVzLCAkcHJvcGVydHkpIHtcclxuICAgICAgICAgICAgICAkdmFsdWU6IGFwcGVuZChtYXAtZ2V0KCRmcmFtZS1wcm9wZXJ0aWVzLCAkcHJvcGVydHkpLCAkdmFsdWUsIG1hcC1nZXQoJHN0YWNrYWJsZS1wcm9wZXJ0aWVzLCAkcHJvcGVydHkpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJGZyYW1lLXByb3BlcnRpZXM6IG1hcC1tZXJnZSgkZnJhbWUtcHJvcGVydGllcywgKCRwcm9wZXJ0eTogJHZhbHVlKSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBAZWFjaCAkcHJvcGVydHksICR2YWx1ZSBpbiAkZnJhbWUtcHJvcGVydGllcyB7XHJcbiAgICAgICAgICAjeyRwcm9wZXJ0eX06ICN7JHZhbHVlfTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIHJlc2V0ICRrZXlmcmFtZXNcclxuICAka2V5ZnJhbWVzOiAoKSAhZ2xvYmFsO1xyXG59XHJcblxyXG5cclxuLy8vIEFkZCBhIGZyYW1lXHJcbi8vLyBAcGFyYW0ge3N0cmluZ30gJGZyYW1lXHJcbi8vLyBAcGFyYW0ge21hcH0gICAgJHByb3BlcnRpZXNcclxuLy8vIEBwYXJhbSB7Ym9vbH0gICAkc3RhY2tcclxuQG1peGluIGZyYW1lKCRmcmFtZSwgJHByb3BlcnRpZXM6ICgpKSB7XHJcblxyXG4gICRkYXRhOiAoXHJcbiAgICAncHJvcGVydGllcyc6ICRwcm9wZXJ0aWVzLFxyXG4gICk7XHJcblxyXG4gICRpbmRleDogMTtcclxuXHJcbiAgQGlmIG5vdChnbG9iYWwtdmFyaWFibGUtZXhpc3RzKCdrZXlmcmFtZXMnKSkge1xyXG4gICAgJGtleWZyYW1lczogKCkgIWdsb2JhbDtcclxuICB9XHJcblxyXG4gIEBpZiBtYXAtaGFzLWtleSgka2V5ZnJhbWVzLCAkZnJhbWUpIHtcclxuICAgICRmcmFtZS1kYXRhOiBtYXAtZ2V0KCRrZXlmcmFtZXMsICRmcmFtZSk7XHJcbiAgICAkaW5kZXg6IGxlbmd0aCgkZnJhbWUtZGF0YSkgKyAxO1xyXG4gICAgJGZyYW1lLWRhdGE6IG1hcC1tZXJnZSgkZnJhbWUtZGF0YSwgKCRpbmRleDogJGRhdGEpKTtcclxuICB9XHJcblxyXG4gIEBlbHNlIHtcclxuICAgICRmcmFtZS1kYXRhOiAoJGluZGV4OiAkZGF0YSk7XHJcbiAgfVxyXG5cclxuICAka2V5ZnJhbWVzOiBtYXAtbWVyZ2UoJGtleWZyYW1lcywgKCRmcmFtZTogJGZyYW1lLWRhdGEpKSAhZ2xvYmFsO1xyXG59XHJcblxyXG5cclxuLy8vIE1peGluIGRpc3BsYXlpbmcgY2xlYW4gZGVidWcuXHJcbi8vLyBAcGFyYW0ge0xpc3R9ICRsaXN0XHJcbi8vLyBAcGFyYW0ge0Jvb2x9ICRwcmUgKHRydWUpXHJcbi8vLyBAcmVxdWlyZXMgZGVidWdcclxuQG1peGluIGRlYnVnKCRsaXN0LCAkcHJlOiB0cnVlKSB7XHJcbiAgaHRtbDo6YmVmb3JlIHtcclxuICAgIGNvbnRlbnQ6IGRlYnVnKCRsaXN0LCAkcHJlKSAhaW1wb3J0YW50O1xyXG4gICAgZGlzcGxheTogYmxvY2sgIWltcG9ydGFudDtcclxuICAgIG1hcmdpbjogMWVtICFpbXBvcnRhbnQ7XHJcbiAgICBwYWRkaW5nOiAwLjVlbSAhaW1wb3J0YW50O1xyXG4gICAgYmFja2dyb3VuZDogI2VmZWZlZiAhaW1wb3J0YW50O1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgI2RkZCAhaW1wb3J0YW50O1xyXG4gICAgYm9yZGVyLXJhZGl1czogMC4yZW0gIWltcG9ydGFudDtcclxuICAgIGNvbG9yOiAjMzMzICFpbXBvcnRhbnQ7XHJcbiAgICBmb250OiAwLjc1ZW0vMS41ICdDb3VyaWVyIE5ldycsIG1vbm9zcGFjZSAhaW1wb3J0YW50O1xyXG4gICAgdGV4dC1zaGFkb3c6IDAgMXB4ICNmZmYgIWltcG9ydGFudDtcclxuICAgIHdoaXRlLXNwYWNlOiBwcmUtd3JhcCAhaW1wb3J0YW50O1xyXG4gIH1cclxufVxyXG4iLCIuYnV0dG9uIHtcclxuICBvdXRsaW5lOiAwO1xyXG59XHJcbiJdfQ== */
