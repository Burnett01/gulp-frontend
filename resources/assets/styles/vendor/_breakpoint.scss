/// @todo description
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

/// @todo description
@function to-em($value, $base-font-size: 16px) {
  $unit: unit($value);

  @if $unit == 'em' {
    @return $value;
  }

  @else if $unit == 'px' {
    @return $value / $base-font-size * 1em;
  }

  @else if $unit == 'rem' {
    @return $value / 1rem * 1em;
  }

  @else if unitless($value) {
    @warn 'Assuming #{$value} to be in pixels, attempting to convert it into em.';
    @return $value / strip-unit($base-font-size) * 1em;
  }

  @else {
    @error 'You sould use px, rem or em.';
  }
}

/// @todo description
@function parse-breakpoint-width($width) {
  $breakpoints: get-option('breakpoints');

  @if type-of($width) == 'string' and map-has-key($breakpoints, $width) {
    $width: map-get($breakpoints, $width);
  }

  @if type-of($width) != 'number' {
    @error '#{type-of($width)}: #{$width} is not a number.'
  }

  @return to-em($width);
}


/// @todo description
@mixin breakpoint($min-width, $media-type: 'all') {
  @include respond-to($min-width, 0px, $media-type) {
    @content;
  }
}

/// @todo description
@mixin breakpoint-until($max-width, $media-type: 'all') {
  @include respond-to(0px, $max-width, $media-type) {
    @content;
  }
}

/// @todo description
@mixin breakpoint-between($min-width, $max-width, $media-type: 'all') {
  @include respond-to($min-width, $max-width, $media-type) {
    @content;
  }
}

/// @todo description
@mixin respond-to($min-width, $max-width, $media-type: 'all') {
  $min-width: parse-breakpoint-width($min-width);
  $max-width: parse-breakpoint-width($max-width);
  $media-query: '';

  // Output rules inside @media queries
  @if strip-unit($min-width) != 0 {
    $media-query: '#{$media-query} and (min-width: #{$min-width})';
  }

  @if strip-unit($max-width) != 0 {
    $max-width: $max-width - 0.01em;
    $media-query: '#{$media-query} and (max-width: #{$max-width})';
  }

  // Remove unnecessary media query prefix 'all and '
  @if ($media-type == 'all' and $media-query != '') {
    $media-type: '';
    $media-query: str-slice(unquote($media-query), 6);
  }

  // Output @media query
  @media #{$media-type + $media-query} {
    @content;
  }
}
