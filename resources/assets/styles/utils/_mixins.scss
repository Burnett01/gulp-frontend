/// Add hyphenation.
/// browser support http://caniuse.com/#search=hyphens
@mixin hyphens() {
  overflow-wrap: break-word;
  word-wrap: break-word;
  hyphens: auto;
}


/// Add a color.
@mixin color-add($key, $value) {

  @if not(global-variable-exists('color-map')) {

    /// Global variable to keep track
    /// of all filters
    /// @type {Map}
    /// @example $color-map: (
    ///   key: value
    /// )
    $color-map: () !global;
  }

  @if type-of($value) != 'color' {
    @warn '#{$value} is not a valid color.';
  }

  $color-map: map-merge($color-map, ($key: $value)) !global;
}


/// Add color gradients.
/// @param {String} $key
@mixin color-add-gradients($key) {

  @if not(global-variable-exists('color-map')) {

    /// Global variable to keep track
    /// of all filters
    /// @type {Map}
    /// @example $color-map: (
    ///   key: value
    /// )
    $color-map: () !global;
  }

  $color: get-color($key);
  $white: #fff;
  $black: #000;

  @if type-of($color) != 'color' {
    @warn '#{$key} is neither a valid color nor in the color map.';
  }

  // suffixes for light gradients
  $gradients: (
    'light',
    'lighter',
    'lightest',
  );

  $length: length($gradients);

  // loop through the gradients
  @for $i from 1 through $length {
    $color-gradient: mix($white, $color, percentage($i / ($length + 1)));
    $color-map: map-merge($color-map, (#{$key + '-' + nth($gradients, $i)}: $color-gradient)) !global;
  }

  // suffixes for light gradients
  $gradients: (
    'dark',
    'darker',
    'darkest',
  );

  $length: length($gradients);

  @for $i from 1 through $length {
    $color-gradient: mix($black, $color, percentage($i / ($length + 1)));
    $color-map: map-merge($color-map, (#{$key + '-' + nth($gradients, $i)}: $color-gradient)) !global;
  }
}


/// Print all frames
/// @param {string} $animation-name
/// @param {bool}   $relative
@mixin keyframes($animation-name, $relative: true) {

  @content;

  // 'property': list-seperator, comma | space
  $stackable-properties: (
    'transform': space,
  );

  $frame-properties: ();

  @if $relative and not(map-has-key($keyframes, '100%')) {
    @include frame(100%);
  }

  @keyframes #{$animation-name} {
    @while length($keyframes) > 0 {

      $frames: map-keys($keyframes);
      $frame: min($frames...);

      $frame-data: map-get($keyframes, $frame);
      $keyframes: map-remove($keyframes, $frame);

      #{$frame} {

        @if not($relative) {
          $frame-properties: ();
        }

        $length: length($frame-data);

        @for $i from 1 through $length {
          $data: nth(nth($frame-data, $i), 2);
          $properties: map-get($data, 'properties');

          @each $property, $value in $properties {
            @if map-has-key($stackable-properties, $property) and map-has-key($frame-properties, $property) {
              $value: append(map-get($frame-properties, $property), $value, map-get($stackable-properties, $property));
            }

            $frame-properties: map-merge($frame-properties, ($property: $value));
          }
        }

        @each $property, $value in $frame-properties {
          #{$property}: #{$value};
        }
      }
    }
  }

  // reset $keyframes
  $keyframes: () !global;
}


/// Add a frame
/// @param {string} $frame
/// @param {map}    $properties
/// @param {bool}   $stack
@mixin frame($frame, $properties: ()) {

  $data: (
    'properties': $properties,
  );

  $index: 1;

  @if not(global-variable-exists('keyframes')) {
    $keyframes: () !global;
  }

  @if map-has-key($keyframes, $frame) {
    $frame-data: map-get($keyframes, $frame);
    $index: length($frame-data) + 1;
    $frame-data: map-merge($frame-data, ($index: $data));
  }

  @else {
    $frame-data: ($index: $data);
  }

  $keyframes: map-merge($keyframes, ($frame: $frame-data)) !global;
}


/// Mixin displaying clean debug.
/// @param {List} $list
/// @param {Bool} $pre (true)
/// @requires debug
@mixin debug($list, $pre: true) {
  html::before {
    content: debug($list, $pre) !important;
    display: block !important;
    margin: 1em !important;
    padding: 0.5em !important;
    background: #efefef !important;
    border: 1px solid #ddd !important;
    border-radius: 0.2em !important;
    color: #333 !important;
    font: 0.75em/1.5 'Courier New', monospace !important;
    text-shadow: 0 1px #fff !important;
    white-space: pre-wrap !important;
  }
}
