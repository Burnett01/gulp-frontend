// TODO: Add description
@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

// TODO: Add description
@function to-px($value, $base: 16px, $context: 16px) {
  $unit: unit($value);

  @if $unit == 'px' {
    @return $value;
  }

  @else if $unit == 'em' {
    @return strip-unit($value) * $context;
  }

  @else if $unit == 'rem' {
    @return strip-unit($value) * $base;
  }

  @else {
    @error 'You sould use em or rem.';
  }
}

// TODO: Add description
@function to-em($value, $base: 16px, $context: 16px) {
  $unit: unit($value);

  @if $unit == 'em' {
    @return $value;
  }

  @else if $unit == 'px' {
    @return $value / $context * 1em;
  }

  @else if $unit == 'rem' {
    @return strip-unit($value) / strip-unit($context) * strip-unit($base) * 1em;
  }

  @else if unitless($value) {
    @warn 'Assuming #{$value} to be in pixels, attempting to convert it into em.';
    @return $value / strip-unit($context) * 1em;
  }

  @else {
    @error 'You sould use px or rem.';
  }
}

// TODO: Add description
@function to-rem($value, $base: 16px, $context: 16px) {
  $unit: unit($value);

  @if $unit == 'rem' {
    @return $value;
  }

  @else if $unit == 'px' {
    @return $value / $base * 1rem;
  }

  @else if $unit == 'em' {
    @return strip-unit($value) / strip-unit($base) * strip-unit($context) * 1rem;
  }

  @else if unitless($value) {
    @warn 'Assuming #{$value} to be in pixels, attempting to convert it into rem.';
    @return $value / strip-unit($base) * 1rem;
  }

  @else {
    @error 'You sould use px or em.';
  }
}

// TODO: Add description
@function map-get-deep($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}
