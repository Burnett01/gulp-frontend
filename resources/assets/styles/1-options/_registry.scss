// TODO: Add description
@mixin set($key, $value) {
  @if not(global-variable-exists('GLOBAL_OPTIONS')) {
    /// Global variable to keep track of all options
    $GLOBAL_OPTIONS: () !global;
  }

  @if map-has-key($GLOBAL_OPTIONS, $key) {
    $current-value: map-get($GLOBAL_OPTIONS, $key);

    @if type-of($current-value) == 'map' and type-of($value) == 'map' {
      $value: map-merge($current-value, $value);
    }

    @else {
      @warn '"#{$key}" is overwritten with: "#{$value}".';
    }
  }

  $GLOBAL_OPTIONS: map-merge($GLOBAL_OPTIONS, ($key: $value)) !global;
}

// TODO: Add description
@mixin set-breakpoint($key, $value) {
  @include set('breakpoint', ($key: $value));
}

// TODO: Add description
@mixin set-font-size($key, $value) {
  @include set('font-size', ($key: $value));
}

// TODO: Add description
@mixin set-font-family($key, $value) {
  @include set('font-family', ($key: $value));
}

// TODO: Add description
@mixin set-spacing($key, $value) {
  @include set('spacing', ($key: $value));
}

// TODO: Add description
@mixin set-color($key, $value, $gradients: false) {
  @include set('color', ($key: $value));
  @if $gradients {
    @include set-color-gradients($key);
  }
}

// TODO: Add description
@mixin set-color-gradients($key) {
  $color-map: map-get($GLOBAL_OPTIONS, 'color');
  $color: map-get($color-map, $key);
  $white: #fff;
  $black: #000;

  @if type-of($color) != 'color' {
    @warn '#{$key} is neither a valid color nor in the color map.';
  }

  // suffixes for light gradients
  $gradients: (
    'light',
    'lighter',
    'lightest',
  );

  $length: length($gradients);

  // loop through the gradients
  @for $i from 1 through $length {
    $color-gradient: mix($white, $color, percentage($i / ($length + 1)));
    @include set-color(#{$key + '-' + nth($gradients, $i)}, $color-gradient);
  }

  // suffixes for dark gradients
  $gradients: (
    'dark',
    'darker',
    'darkest',
  );

  $length: length($gradients);

  @for $i from 1 through $length {
    $color-gradient: mix($black, $color, percentage($i / ($length + 1)));
    @include set-color(#{$key + '-' + nth($gradients, $i)}, $color-gradient);
  }

}
